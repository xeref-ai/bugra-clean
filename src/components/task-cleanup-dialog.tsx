
'use client';

import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Lightbulb, Archive, Merge } from 'lucide-react';

// This is a mock analysis result. In a real scenario, this would
// be generated by an AI model.
const analysisResult = {
  summary: 'Found 3 potential improvements for your tasks.',
  suggestions: [
    {
      id: 's1',
      type: 'merge',
      icon: Merge,
      description: 'Merge 2 duplicate tasks: "Create marketing materials"',
      tasks: ['task-123', 'task-456'],
      defaultEnabled: true,
    },
    {
      id: 's2',
      type: 'archive',
      icon: Archive,
      description: 'Archive 1 old task: "Initial project setup"',
      tasks: ['task-789'],
      defaultEnabled: true,
    },
    {
      id: 's3',
      type: 'clarify',
      icon: Lightbulb,
      description: 'Suggestion: Clarify the title of "Fix bugs"',
      tasks: ['task-987'],
      defaultEnabled: false,
    },
  ],
};

interface TaskCleanupDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onAccept: (selectedActions: string[]) => void;
}

export const TaskCleanupDialog: React.FC<TaskCleanupDialogProps> = ({
  open,
  onOpenChange,
  onAccept,
}) => {
  const [selectedActions, setSelectedActions] = React.useState<string[]>(
    analysisResult.suggestions.filter(s => s.defaultEnabled).map(s => s.id)
  );

  const handleToggleAction = (actionId: string) => {
    setSelectedActions(prev =>
      prev.includes(actionId)
        ? prev.filter(id => id !== actionId)
        : [...prev, actionId]
    );
  };

  const handleAccept = () => {
    onAccept(selectedActions);
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>AI Task Cleanup Results</DialogTitle>
          <DialogDescription>{analysisResult.summary}</DialogDescription>
        </DialogHeader>
        <ScrollArea className="max-h-[60vh] pr-4">
          <div className="space-y-4 py-4">
            {analysisResult.suggestions.map(suggestion => (
              <div
                key={suggestion.id}
                className="flex items-start space-x-4 rounded-md p-3 transition-colors hover:bg-muted/50"
              >
                <Checkbox
                  id={suggestion.id}
                  checked={selectedActions.includes(suggestion.id)}
                  onCheckedChange={() => handleToggleAction(suggestion.id)}
                  className="mt-1"
                />
                <div className="flex-1">
                  <div className="flex items-center">
                    <suggestion.icon className="mr-2 h-4 w-4 text-muted-foreground" />
                    <label htmlFor={suggestion.id} className="font-medium">
                      {suggestion.description}
                    </label>
                  </div>
                  <Badge variant="outline" className="mt-2">
                    {suggestion.type.charAt(0).toUpperCase() + suggestion.type.slice(1)}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Decline
          </Button>
          <Button onClick={handleAccept}>Accept Suggestions</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
