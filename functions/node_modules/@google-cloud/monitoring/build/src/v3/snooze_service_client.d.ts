import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The SnoozeService API is used to temporarily prevent an alert policy from
 *  generating alerts. A Snooze is a description of the criteria under which one
 *  or more alert policies should not fire alerts for the specified duration.
 * @class
 * @memberof v3
 */
export declare class SnoozeServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    private _log;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    snoozeServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of SnoozeServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new SnoozeServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a `Snooze` that will prevent alerts, which match the provided
     * criteria, from being opened. The `Snooze` applies for a specific time
     * interval.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
     *   a `Snooze` should be created. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {google.monitoring.v3.Snooze} request.snooze
     *   Required. The `Snooze` to create. Omit the `name` field, as it will be
     *   filled in by the API.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.monitoring.v3.Snooze|Snooze}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/snooze_service.create_snooze.js</caption>
     * region_tag:monitoring_v3_generated_SnoozeService_CreateSnooze_async
     */
    createSnooze(request?: protos.google.monitoring.v3.ICreateSnoozeRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.ICreateSnoozeRequest | undefined,
        {} | undefined
    ]>;
    createSnooze(request: protos.google.monitoring.v3.ICreateSnoozeRequest, options: CallOptions, callback: Callback<protos.google.monitoring.v3.ISnooze, protos.google.monitoring.v3.ICreateSnoozeRequest | null | undefined, {} | null | undefined>): void;
    createSnooze(request: protos.google.monitoring.v3.ICreateSnoozeRequest, callback: Callback<protos.google.monitoring.v3.ISnooze, protos.google.monitoring.v3.ICreateSnoozeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves a `Snooze` by `name`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The ID of the `Snooze` to retrieve. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.monitoring.v3.Snooze|Snooze}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/snooze_service.get_snooze.js</caption>
     * region_tag:monitoring_v3_generated_SnoozeService_GetSnooze_async
     */
    getSnooze(request?: protos.google.monitoring.v3.IGetSnoozeRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IGetSnoozeRequest | undefined,
        {} | undefined
    ]>;
    getSnooze(request: protos.google.monitoring.v3.IGetSnoozeRequest, options: CallOptions, callback: Callback<protos.google.monitoring.v3.ISnooze, protos.google.monitoring.v3.IGetSnoozeRequest | null | undefined, {} | null | undefined>): void;
    getSnooze(request: protos.google.monitoring.v3.IGetSnoozeRequest, callback: Callback<protos.google.monitoring.v3.ISnooze, protos.google.monitoring.v3.IGetSnoozeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a `Snooze`, identified by its `name`, with the parameters in the
     * given `Snooze` object.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.monitoring.v3.Snooze} request.snooze
     *   Required. The `Snooze` to update. Must have the name field present.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The fields to update.
     *
     *   For each field listed in `update_mask`:
     *
     *     * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
     *       value for that field, the value of the field in the existing `Snooze`
     *       will be set to the value of the field in the supplied `Snooze`.
     *     * If the field does not have a value in the supplied `Snooze`, the field
     *       in the existing `Snooze` is set to its default value.
     *
     *   Fields not listed retain their existing value.
     *
     *   The following are the field names that are accepted in `update_mask`:
     *
     *     * `display_name`
     *     * `interval.start_time`
     *     * `interval.end_time`
     *
     *   That said, the start time and end time of the `Snooze` determines which
     *   fields can legally be updated. Before attempting an update, users should
     *   consult the documentation for `UpdateSnoozeRequest`, which talks about
     *   which fields can be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.monitoring.v3.Snooze|Snooze}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/snooze_service.update_snooze.js</caption>
     * region_tag:monitoring_v3_generated_SnoozeService_UpdateSnooze_async
     */
    updateSnooze(request?: protos.google.monitoring.v3.IUpdateSnoozeRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IUpdateSnoozeRequest | undefined,
        {} | undefined
    ]>;
    updateSnooze(request: protos.google.monitoring.v3.IUpdateSnoozeRequest, options: CallOptions, callback: Callback<protos.google.monitoring.v3.ISnooze, protos.google.monitoring.v3.IUpdateSnoozeRequest | null | undefined, {} | null | undefined>): void;
    updateSnooze(request: protos.google.monitoring.v3.IUpdateSnoozeRequest, callback: Callback<protos.google.monitoring.v3.ISnooze, protos.google.monitoring.v3.IUpdateSnoozeRequest | null | undefined, {} | null | undefined>): void;
    /**
    * Lists the `Snooze`s associated with a project. Can optionally pass in
    * `filter`, which specifies predicates to match `Snooze`s.
    *
    * @param {Object} request
    *   The request object that will be sent.
    * @param {string} request.parent
    *   Required. The
    *   [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
    *   `Snooze`s should be listed. The format is:
    *
    *       projects/[PROJECT_ID_OR_NUMBER]
    * @param {string} [request.filter]
    *   Optional. Optional filter to restrict results to the given criteria. The
    *   following fields are supported.
    *
    *     * `interval.start_time`
    *     * `interval.end_time`
    *
    *   For example:
    *
    *       interval.start_time > "2022-03-11T00:00:00-08:00" AND
    *           interval.end_time < "2022-03-12T00:00:00-08:00"
    * @param {number} [request.pageSize]
    *   Optional. The maximum number of results to return for a single query. The
    *   server may further constrain the maximum number of results returned in a
    *   single page. The value should be in the range [1, 1000]. If the value given
    *   is outside this range, the server will decide the number of results to be
    *   returned.
    * @param {string} [request.pageToken]
    *   Optional. The `next_page_token` from a previous call to
    *   `ListSnoozesRequest` to get the next page of results.
    * @param {object} [options]
    *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
    * @returns {Promise} - The promise which resolves to an array.
    *   The first element of the array is Array of {@link protos.google.monitoring.v3.Snooze|Snooze}.
    *   The client library will perform auto-pagination by default: it will call the API as many
    *   times as needed and will merge results from all the pages into this array.
    *   Note that it can affect your quota.
    *   We recommend using `listSnoozesAsync()`
    *   method described below for async iteration which you can stop as needed.
    *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
    *   for more details and examples.
    */
    listSnoozes(request?: protos.google.monitoring.v3.IListSnoozesRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.v3.ISnooze[],
        protos.google.monitoring.v3.IListSnoozesRequest | null,
        protos.google.monitoring.v3.IListSnoozesResponse
    ]>;
    listSnoozes(request: protos.google.monitoring.v3.IListSnoozesRequest, options: CallOptions, callback: PaginationCallback<protos.google.monitoring.v3.IListSnoozesRequest, protos.google.monitoring.v3.IListSnoozesResponse | null | undefined, protos.google.monitoring.v3.ISnooze>): void;
    listSnoozes(request: protos.google.monitoring.v3.IListSnoozesRequest, callback: PaginationCallback<protos.google.monitoring.v3.IListSnoozesRequest, protos.google.monitoring.v3.IListSnoozesResponse | null | undefined, protos.google.monitoring.v3.ISnooze>): void;
    /**
     * Equivalent to `listSnoozes`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
     *   `Snooze`s should be listed. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} [request.filter]
     *   Optional. Optional filter to restrict results to the given criteria. The
     *   following fields are supported.
     *
     *     * `interval.start_time`
     *     * `interval.end_time`
     *
     *   For example:
     *
     *       interval.start_time > "2022-03-11T00:00:00-08:00" AND
     *           interval.end_time < "2022-03-12T00:00:00-08:00"
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of results to return for a single query. The
     *   server may further constrain the maximum number of results returned in a
     *   single page. The value should be in the range [1, 1000]. If the value given
     *   is outside this range, the server will decide the number of results to be
     *   returned.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` from a previous call to
     *   `ListSnoozesRequest` to get the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.monitoring.v3.Snooze|Snooze} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSnoozesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSnoozesStream(request?: protos.google.monitoring.v3.IListSnoozesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSnoozes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
     *   `Snooze`s should be listed. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} [request.filter]
     *   Optional. Optional filter to restrict results to the given criteria. The
     *   following fields are supported.
     *
     *     * `interval.start_time`
     *     * `interval.end_time`
     *
     *   For example:
     *
     *       interval.start_time > "2022-03-11T00:00:00-08:00" AND
     *           interval.end_time < "2022-03-12T00:00:00-08:00"
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of results to return for a single query. The
     *   server may further constrain the maximum number of results returned in a
     *   single page. The value should be in the range [1, 1000]. If the value given
     *   is outside this range, the server will decide the number of results to be
     *   returned.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` from a previous call to
     *   `ListSnoozesRequest` to get the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.monitoring.v3.Snooze|Snooze}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/snooze_service.list_snoozes.js</caption>
     * region_tag:monitoring_v3_generated_SnoozeService_ListSnoozes_async
     */
    listSnoozesAsync(request?: protos.google.monitoring.v3.IListSnoozesRequest, options?: CallOptions): AsyncIterable<protos.google.monitoring.v3.ISnooze>;
    /**
     * Return a fully-qualified folderAlertPolicy resource name string.
     *
     * @param {string} folder
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    folderAlertPolicyPath(folder: string, alertPolicy: string): string;
    /**
     * Parse the folder from FolderAlertPolicy resource.
     *
     * @param {string} folderAlertPolicyName
     *   A fully-qualified path representing folder_alert_policy resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderAlertPolicyName(folderAlertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from FolderAlertPolicy resource.
     *
     * @param {string} folderAlertPolicyName
     *   A fully-qualified path representing folder_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromFolderAlertPolicyName(folderAlertPolicyName: string): string | number;
    /**
     * Return a fully-qualified folderAlertPolicyCondition resource name string.
     *
     * @param {string} folder
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    folderAlertPolicyConditionPath(folder: string, alertPolicy: string, condition: string): string;
    /**
     * Parse the folder from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string): string | number;
    /**
     * Parse the alert_policy from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string): string | number;
    /**
     * Parse the condition from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string): string | number;
    /**
     * Return a fully-qualified folderChannelDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    folderChannelDescriptorPath(folder: string, channelDescriptor: string): string;
    /**
     * Parse the folder from FolderChannelDescriptor resource.
     *
     * @param {string} folderChannelDescriptorName
     *   A fully-qualified path representing folder_channel_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderChannelDescriptorName(folderChannelDescriptorName: string): string | number;
    /**
     * Parse the channel_descriptor from FolderChannelDescriptor resource.
     *
     * @param {string} folderChannelDescriptorName
     *   A fully-qualified path representing folder_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromFolderChannelDescriptorName(folderChannelDescriptorName: string): string | number;
    /**
     * Return a fully-qualified folderGroup resource name string.
     *
     * @param {string} folder
     * @param {string} group
     * @returns {string} Resource name string.
     */
    folderGroupPath(folder: string, group: string): string;
    /**
     * Parse the folder from FolderGroup resource.
     *
     * @param {string} folderGroupName
     *   A fully-qualified path representing folder_group resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderGroupName(folderGroupName: string): string | number;
    /**
     * Parse the group from FolderGroup resource.
     *
     * @param {string} folderGroupName
     *   A fully-qualified path representing folder_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromFolderGroupName(folderGroupName: string): string | number;
    /**
     * Return a fully-qualified folderNotificationChannel resource name string.
     *
     * @param {string} folder
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    folderNotificationChannelPath(folder: string, notificationChannel: string): string;
    /**
     * Parse the folder from FolderNotificationChannel resource.
     *
     * @param {string} folderNotificationChannelName
     *   A fully-qualified path representing folder_notification_channel resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderNotificationChannelName(folderNotificationChannelName: string): string | number;
    /**
     * Parse the notification_channel from FolderNotificationChannel resource.
     *
     * @param {string} folderNotificationChannelName
     *   A fully-qualified path representing folder_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromFolderNotificationChannelName(folderNotificationChannelName: string): string | number;
    /**
     * Return a fully-qualified folderService resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @returns {string} Resource name string.
     */
    folderServicePath(folder: string, service: string): string;
    /**
     * Parse the folder from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceName(folderServiceName: string): string | number;
    /**
     * Parse the service from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceName(folderServiceName: string): string | number;
    /**
     * Return a fully-qualified folderServiceServiceLevelObjective resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    folderServiceServiceLevelObjectivePath(folder: string, service: string, serviceLevelObjective: string): string;
    /**
     * Parse the folder from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service_level_objective from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Return a fully-qualified folderUptimeCheckConfig resource name string.
     *
     * @param {string} folder
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    folderUptimeCheckConfigPath(folder: string, uptimeCheckConfig: string): string;
    /**
     * Parse the folder from FolderUptimeCheckConfig resource.
     *
     * @param {string} folderUptimeCheckConfigName
     *   A fully-qualified path representing folder_uptime_check_config resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string): string | number;
    /**
     * Parse the uptime_check_config from FolderUptimeCheckConfig resource.
     *
     * @param {string} folderUptimeCheckConfigName
     *   A fully-qualified path representing folder_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string): string | number;
    /**
     * Return a fully-qualified organizationAlertPolicy resource name string.
     *
     * @param {string} organization
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    organizationAlertPolicyPath(organization: string, alertPolicy: string): string;
    /**
     * Parse the organization from OrganizationAlertPolicy resource.
     *
     * @param {string} organizationAlertPolicyName
     *   A fully-qualified path representing organization_alert_policy resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationAlertPolicyName(organizationAlertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from OrganizationAlertPolicy resource.
     *
     * @param {string} organizationAlertPolicyName
     *   A fully-qualified path representing organization_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromOrganizationAlertPolicyName(organizationAlertPolicyName: string): string | number;
    /**
     * Return a fully-qualified organizationAlertPolicyCondition resource name string.
     *
     * @param {string} organization
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    organizationAlertPolicyConditionPath(organization: string, alertPolicy: string, condition: string): string;
    /**
     * Parse the organization from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string): string | number;
    /**
     * Parse the alert_policy from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string): string | number;
    /**
     * Parse the condition from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string): string | number;
    /**
     * Return a fully-qualified organizationChannelDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    organizationChannelDescriptorPath(organization: string, channelDescriptor: string): string;
    /**
     * Parse the organization from OrganizationChannelDescriptor resource.
     *
     * @param {string} organizationChannelDescriptorName
     *   A fully-qualified path representing organization_channel_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationChannelDescriptorName(organizationChannelDescriptorName: string): string | number;
    /**
     * Parse the channel_descriptor from OrganizationChannelDescriptor resource.
     *
     * @param {string} organizationChannelDescriptorName
     *   A fully-qualified path representing organization_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromOrganizationChannelDescriptorName(organizationChannelDescriptorName: string): string | number;
    /**
     * Return a fully-qualified organizationGroup resource name string.
     *
     * @param {string} organization
     * @param {string} group
     * @returns {string} Resource name string.
     */
    organizationGroupPath(organization: string, group: string): string;
    /**
     * Parse the organization from OrganizationGroup resource.
     *
     * @param {string} organizationGroupName
     *   A fully-qualified path representing organization_group resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationGroupName(organizationGroupName: string): string | number;
    /**
     * Parse the group from OrganizationGroup resource.
     *
     * @param {string} organizationGroupName
     *   A fully-qualified path representing organization_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromOrganizationGroupName(organizationGroupName: string): string | number;
    /**
     * Return a fully-qualified organizationNotificationChannel resource name string.
     *
     * @param {string} organization
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    organizationNotificationChannelPath(organization: string, notificationChannel: string): string;
    /**
     * Parse the organization from OrganizationNotificationChannel resource.
     *
     * @param {string} organizationNotificationChannelName
     *   A fully-qualified path representing organization_notification_channel resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationNotificationChannelName(organizationNotificationChannelName: string): string | number;
    /**
     * Parse the notification_channel from OrganizationNotificationChannel resource.
     *
     * @param {string} organizationNotificationChannelName
     *   A fully-qualified path representing organization_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromOrganizationNotificationChannelName(organizationNotificationChannelName: string): string | number;
    /**
     * Return a fully-qualified organizationService resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @returns {string} Resource name string.
     */
    organizationServicePath(organization: string, service: string): string;
    /**
     * Parse the organization from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceName(organizationServiceName: string): string | number;
    /**
     * Parse the service from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceName(organizationServiceName: string): string | number;
    /**
     * Return a fully-qualified organizationServiceServiceLevelObjective resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    organizationServiceServiceLevelObjectivePath(organization: string, service: string, serviceLevelObjective: string): string;
    /**
     * Parse the organization from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service_level_objective from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Return a fully-qualified organizationUptimeCheckConfig resource name string.
     *
     * @param {string} organization
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    organizationUptimeCheckConfigPath(organization: string, uptimeCheckConfig: string): string;
    /**
     * Parse the organization from OrganizationUptimeCheckConfig resource.
     *
     * @param {string} organizationUptimeCheckConfigName
     *   A fully-qualified path representing organization_uptime_check_config resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string): string | number;
    /**
     * Parse the uptime_check_config from OrganizationUptimeCheckConfig resource.
     *
     * @param {string} organizationUptimeCheckConfigName
     *   A fully-qualified path representing organization_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectAlertPolicy resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    projectAlertPolicyPath(project: string, alertPolicy: string): string;
    /**
     * Parse the project from ProjectAlertPolicy resource.
     *
     * @param {string} projectAlertPolicyName
     *   A fully-qualified path representing project_alert_policy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAlertPolicyName(projectAlertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from ProjectAlertPolicy resource.
     *
     * @param {string} projectAlertPolicyName
     *   A fully-qualified path representing project_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromProjectAlertPolicyName(projectAlertPolicyName: string): string | number;
    /**
     * Return a fully-qualified projectAlertPolicyCondition resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    projectAlertPolicyConditionPath(project: string, alertPolicy: string, condition: string): string;
    /**
     * Parse the project from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string): string | number;
    /**
     * Parse the alert_policy from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string): string | number;
    /**
     * Parse the condition from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string): string | number;
    /**
     * Return a fully-qualified projectChannelDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    projectChannelDescriptorPath(project: string, channelDescriptor: string): string;
    /**
     * Parse the project from ProjectChannelDescriptor resource.
     *
     * @param {string} projectChannelDescriptorName
     *   A fully-qualified path representing project_channel_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectChannelDescriptorName(projectChannelDescriptorName: string): string | number;
    /**
     * Parse the channel_descriptor from ProjectChannelDescriptor resource.
     *
     * @param {string} projectChannelDescriptorName
     *   A fully-qualified path representing project_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromProjectChannelDescriptorName(projectChannelDescriptorName: string): string | number;
    /**
     * Return a fully-qualified projectGroup resource name string.
     *
     * @param {string} project
     * @param {string} group
     * @returns {string} Resource name string.
     */
    projectGroupPath(project: string, group: string): string;
    /**
     * Parse the project from ProjectGroup resource.
     *
     * @param {string} projectGroupName
     *   A fully-qualified path representing project_group resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectGroupName(projectGroupName: string): string | number;
    /**
     * Parse the group from ProjectGroup resource.
     *
     * @param {string} projectGroupName
     *   A fully-qualified path representing project_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromProjectGroupName(projectGroupName: string): string | number;
    /**
     * Return a fully-qualified projectNotificationChannel resource name string.
     *
     * @param {string} project
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    projectNotificationChannelPath(project: string, notificationChannel: string): string;
    /**
     * Parse the project from ProjectNotificationChannel resource.
     *
     * @param {string} projectNotificationChannelName
     *   A fully-qualified path representing project_notification_channel resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectNotificationChannelName(projectNotificationChannelName: string): string | number;
    /**
     * Parse the notification_channel from ProjectNotificationChannel resource.
     *
     * @param {string} projectNotificationChannelName
     *   A fully-qualified path representing project_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromProjectNotificationChannelName(projectNotificationChannelName: string): string | number;
    /**
     * Return a fully-qualified projectService resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @returns {string} Resource name string.
     */
    projectServicePath(project: string, service: string): string;
    /**
     * Parse the project from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceName(projectServiceName: string): string | number;
    /**
     * Parse the service from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceName(projectServiceName: string): string | number;
    /**
     * Return a fully-qualified projectServiceServiceLevelObjective resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    projectServiceServiceLevelObjectivePath(project: string, service: string, serviceLevelObjective: string): string;
    /**
     * Parse the project from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service_level_objective from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Return a fully-qualified projectUptimeCheckConfig resource name string.
     *
     * @param {string} project
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    projectUptimeCheckConfigPath(project: string, uptimeCheckConfig: string): string;
    /**
     * Parse the project from ProjectUptimeCheckConfig resource.
     *
     * @param {string} projectUptimeCheckConfigName
     *   A fully-qualified path representing project_uptime_check_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string): string | number;
    /**
     * Parse the uptime_check_config from ProjectUptimeCheckConfig resource.
     *
     * @param {string} projectUptimeCheckConfigName
     *   A fully-qualified path representing project_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string): string | number;
    /**
     * Return a fully-qualified snooze resource name string.
     *
     * @param {string} project
     * @param {string} snooze
     * @returns {string} Resource name string.
     */
    snoozePath(project: string, snooze: string): string;
    /**
     * Parse the project from Snooze resource.
     *
     * @param {string} snoozeName
     *   A fully-qualified path representing Snooze resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnoozeName(snoozeName: string): string | number;
    /**
     * Parse the snooze from Snooze resource.
     *
     * @param {string} snoozeName
     *   A fully-qualified path representing Snooze resource.
     * @returns {string} A string representing the snooze.
     */
    matchSnoozeFromSnoozeName(snoozeName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
