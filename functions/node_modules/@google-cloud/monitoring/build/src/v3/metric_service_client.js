"use strict";
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
const google_gax_1 = require("google-gax");
/**
 * Client JSON configuration object, loaded from
 * `src/v3/metric_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./metric_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Manages metric descriptors, monitored resource descriptors, and
 *  time series data.
 * @class
 * @memberof v3
 */
class MetricServiceClient {
    _terminated = false;
    _opts;
    _providedCustomServicePath;
    _gaxModule;
    _gaxGrpc;
    _protos;
    _defaults;
    _universeDomain;
    _servicePath;
    _log = google_gax_1.loggingUtils.log('monitoring');
    auth;
    descriptors = {
        page: {},
        stream: {},
        longrunning: {},
        batching: {},
    };
    warn;
    innerApiCalls;
    pathTemplates;
    metricServiceStub;
    /**
     * Construct an instance of MetricServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new MetricServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
        this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
        this._servicePath = 'monitoring.' + this._universeDomain;
        const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
        const port = opts?.port || staticMembers.port;
        const clientConfig = opts?.clientConfig ?? {};
        const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [
            `gax/${this._gaxModule.version}`,
            `gapic/${version}`,
        ];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            folderAlertPolicyPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/alertPolicies/{alert_policy}'),
            folderAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/alertPolicies/{alert_policy}/conditions/{condition}'),
            folderChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/notificationChannelDescriptors/{channel_descriptor}'),
            folderGroupPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/groups/{group}'),
            folderMetricDescriptorPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/metricDescriptors/{metric_descriptor=**}'),
            folderMonitoredResourceDescriptorPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/monitoredResourceDescriptors/{monitored_resource_descriptor}'),
            folderNotificationChannelPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/notificationChannels/{notification_channel}'),
            folderServicePathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/services/{service}'),
            folderServiceServiceLevelObjectivePathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/services/{service}/serviceLevelObjectives/{service_level_objective}'),
            folderUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}/uptimeCheckConfigs/{uptime_check_config}'),
            organizationAlertPolicyPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/alertPolicies/{alert_policy}'),
            organizationAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/alertPolicies/{alert_policy}/conditions/{condition}'),
            organizationChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/notificationChannelDescriptors/{channel_descriptor}'),
            organizationGroupPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/groups/{group}'),
            organizationMetricDescriptorPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/metricDescriptors/{metric_descriptor=**}'),
            organizationMonitoredResourceDescriptorPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/monitoredResourceDescriptors/{monitored_resource_descriptor}'),
            organizationNotificationChannelPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/notificationChannels/{notification_channel}'),
            organizationServicePathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/services/{service}'),
            organizationServiceServiceLevelObjectivePathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/services/{service}/serviceLevelObjectives/{service_level_objective}'),
            organizationUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/uptimeCheckConfigs/{uptime_check_config}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            projectAlertPolicyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/alertPolicies/{alert_policy}'),
            projectAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/alertPolicies/{alert_policy}/conditions/{condition}'),
            projectChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/notificationChannelDescriptors/{channel_descriptor}'),
            projectGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/groups/{group}'),
            projectMetricDescriptorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/metricDescriptors/{metric_descriptor=**}'),
            projectMonitoredResourceDescriptorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/monitoredResourceDescriptors/{monitored_resource_descriptor}'),
            projectNotificationChannelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/notificationChannels/{notification_channel}'),
            projectServicePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/services/{service}'),
            projectServiceServiceLevelObjectivePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/services/{service}/serviceLevelObjectives/{service_level_objective}'),
            projectTimeSeriesPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/timeSeries/{time_series}'),
            projectUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/uptimeCheckConfigs/{uptime_check_config}'),
            snoozePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/snoozes/{snooze}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listMonitoredResourceDescriptors: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'resourceDescriptors'),
            listMetricDescriptors: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'metricDescriptors'),
            listTimeSeries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'timeSeries')
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.monitoring.v3.MetricService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.metricServiceStub) {
            return this.metricServiceStub;
        }
        // Put together the "service stub" for
        // google.monitoring.v3.MetricService.
        this.metricServiceStub = this._gaxGrpc.createStub(this._opts.fallback ?
            this._protos.lookupService('google.monitoring.v3.MetricService') :
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this._protos.google.monitoring.v3.MetricService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const metricServiceStubMethods = ['listMonitoredResourceDescriptors', 'getMonitoredResourceDescriptor', 'listMetricDescriptors', 'getMetricDescriptor', 'createMetricDescriptor', 'deleteMetricDescriptor', 'listTimeSeries', 'createTimeSeries', 'createServiceTimeSeries'];
        for (const methodName of metricServiceStubMethods) {
            const callPromise = this.metricServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.metricServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'monitoring.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'monitoring.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/monitoring',
            'https://www.googleapis.com/auth/monitoring.read',
            'https://www.googleapis.com/auth/monitoring.write'
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getMonitoredResourceDescriptor(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('getMonitoredResourceDescriptor request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getMonitoredResourceDescriptor response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.getMonitoredResourceDescriptor(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getMonitoredResourceDescriptor response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    getMetricDescriptor(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('getMetricDescriptor request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getMetricDescriptor response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.getMetricDescriptor(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getMetricDescriptor response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    createMetricDescriptor(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('createMetricDescriptor request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('createMetricDescriptor response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.createMetricDescriptor(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('createMetricDescriptor response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    deleteMetricDescriptor(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('deleteMetricDescriptor request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('deleteMetricDescriptor response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.deleteMetricDescriptor(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('deleteMetricDescriptor response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    createTimeSeries(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('createTimeSeries request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('createTimeSeries response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.createTimeSeries(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('createTimeSeries response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    createServiceTimeSeries(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('createServiceTimeSeries request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('createServiceTimeSeries response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.createServiceTimeSeries(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('createServiceTimeSeries response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    listMonitoredResourceDescriptors(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listMonitoredResourceDescriptors values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listMonitoredResourceDescriptors request %j', request);
        return this.innerApiCalls
            .listMonitoredResourceDescriptors(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listMonitoredResourceDescriptors values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listMonitoredResourceDescriptors`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} request.filter
     *   An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   describing the descriptors to be returned.  The filter can reference the
     *   descriptor's type and labels. For example, the following filter returns
     *   only Google Compute Engine descriptors that have an `id` label:
     *
     *       resource.type = starts_with("gce_") AND resource.label:id
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.api.MonitoredResourceDescriptor|MonitoredResourceDescriptor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMonitoredResourceDescriptorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMonitoredResourceDescriptorsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        const defaultCallSettings = this._defaults['listMonitoredResourceDescriptors'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listMonitoredResourceDescriptors stream %j', request);
        return this.descriptors.page.listMonitoredResourceDescriptors.createStream(this.innerApiCalls.listMonitoredResourceDescriptors, request, callSettings);
    }
    /**
     * Equivalent to `listMonitoredResourceDescriptors`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} request.filter
     *   An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   describing the descriptors to be returned.  The filter can reference the
     *   descriptor's type and labels. For example, the following filter returns
     *   only Google Compute Engine descriptors that have an `id` label:
     *
     *       resource.type = starts_with("gce_") AND resource.label:id
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.api.MonitoredResourceDescriptor|MonitoredResourceDescriptor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.list_monitored_resource_descriptors.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_ListMonitoredResourceDescriptors_async
     */
    listMonitoredResourceDescriptorsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        const defaultCallSettings = this._defaults['listMonitoredResourceDescriptors'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listMonitoredResourceDescriptors iterate %j', request);
        return this.descriptors.page.listMonitoredResourceDescriptors.asyncIterate(this.innerApiCalls['listMonitoredResourceDescriptors'], request, callSettings);
    }
    listMetricDescriptors(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listMetricDescriptors values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listMetricDescriptors request %j', request);
        return this.innerApiCalls
            .listMetricDescriptors(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listMetricDescriptors values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listMetricDescriptors`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} [request.filter]
     *   Optional. If this field is empty, all custom and
     *   system-defined metric descriptors are returned.
     *   Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   specifies which metric descriptors are to be
     *   returned. For example, the following filter matches all
     *   [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
     *
     *       metric.type = starts_with("custom.googleapis.com/")
     * @param {number} [request.pageSize]
     *   Optional. A positive number that is the maximum number of results to
     *   return. The default and maximum value is 10,000. If a page_size <= 0 or >
     *   10,000 is submitted, will instead return a maximum of 10,000 results.
     * @param {string} [request.pageToken]
     *   Optional. If this field is not empty then it must contain the
     *   `nextPageToken` value returned by a previous call to this method.  Using
     *   this field causes the method to return additional results from the previous
     *   method call.
     * @param {boolean} [request.activeOnly]
     *   Optional. If true, only metrics and monitored resource types that have
     *   recent data (within roughly 25 hours) will be included in the response.
     *    - If a metric descriptor enumerates monitored resource types, only the
     *      monitored resource types for which the metric type has recent data will
     *      be included in the returned metric descriptor, and if none of them have
     *      recent data, the metric descriptor will not be returned.
     *    - If a metric descriptor does not enumerate the compatible monitored
     *      resource types, it will be returned only if the metric type has recent
     *      data for some monitored resource type. The returned descriptor will not
     *      enumerate any monitored resource types.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.api.MetricDescriptor|MetricDescriptor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMetricDescriptorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMetricDescriptorsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        const defaultCallSettings = this._defaults['listMetricDescriptors'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listMetricDescriptors stream %j', request);
        return this.descriptors.page.listMetricDescriptors.createStream(this.innerApiCalls.listMetricDescriptors, request, callSettings);
    }
    /**
     * Equivalent to `listMetricDescriptors`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} [request.filter]
     *   Optional. If this field is empty, all custom and
     *   system-defined metric descriptors are returned.
     *   Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   specifies which metric descriptors are to be
     *   returned. For example, the following filter matches all
     *   [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
     *
     *       metric.type = starts_with("custom.googleapis.com/")
     * @param {number} [request.pageSize]
     *   Optional. A positive number that is the maximum number of results to
     *   return. The default and maximum value is 10,000. If a page_size <= 0 or >
     *   10,000 is submitted, will instead return a maximum of 10,000 results.
     * @param {string} [request.pageToken]
     *   Optional. If this field is not empty then it must contain the
     *   `nextPageToken` value returned by a previous call to this method.  Using
     *   this field causes the method to return additional results from the previous
     *   method call.
     * @param {boolean} [request.activeOnly]
     *   Optional. If true, only metrics and monitored resource types that have
     *   recent data (within roughly 25 hours) will be included in the response.
     *    - If a metric descriptor enumerates monitored resource types, only the
     *      monitored resource types for which the metric type has recent data will
     *      be included in the returned metric descriptor, and if none of them have
     *      recent data, the metric descriptor will not be returned.
     *    - If a metric descriptor does not enumerate the compatible monitored
     *      resource types, it will be returned only if the metric type has recent
     *      data for some monitored resource type. The returned descriptor will not
     *      enumerate any monitored resource types.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.api.MetricDescriptor|MetricDescriptor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.list_metric_descriptors.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_ListMetricDescriptors_async
     */
    listMetricDescriptorsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        const defaultCallSettings = this._defaults['listMetricDescriptors'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listMetricDescriptors iterate %j', request);
        return this.descriptors.page.listMetricDescriptors.asyncIterate(this.innerApiCalls['listMetricDescriptors'], request, callSettings);
    }
    listTimeSeries(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listTimeSeries values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listTimeSeries request %j', request);
        return this.innerApiCalls
            .listTimeSeries(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listTimeSeries values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listTimeSeries`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name),
     *   organization or folder on which to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     *       organizations/[ORGANIZATION_ID]
     *       folders/[FOLDER_ID]
     * @param {string} request.filter
     *   Required. A [monitoring
     *   filter](https://cloud.google.com/monitoring/api/v3/filters) that specifies
     *   which time series should be returned.  The filter must specify a single
     *   metric type, and can additionally specify metric labels and other
     *   information. For example:
     *
     *       metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
     *           metric.labels.instance_name = "my-instance-name"
     * @param {google.monitoring.v3.TimeInterval} request.interval
     *   Required. The time interval for which results should be returned. Only time
     *   series that contain data points in the specified interval are included in
     *   the response.
     * @param {google.monitoring.v3.Aggregation} request.aggregation
     *   Specifies the alignment of data points in individual time series as
     *   well as how to combine the retrieved time series across specified labels.
     *
     *   By default (if no `aggregation` is explicitly specified), the raw time
     *   series data is returned.
     * @param {google.monitoring.v3.Aggregation} request.secondaryAggregation
     *   Apply a second aggregation after `aggregation` is applied. May only be
     *   specified if `aggregation` is specified.
     * @param {string} request.orderBy
     *   Unsupported: must be left blank. The points in each time series are
     *   currently returned in reverse time order (most recent to oldest).
     * @param {google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView} request.view
     *   Required. Specifies which information is returned about the time series.
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return. If
     *   `page_size` is empty or more than 100,000 results, the effective
     *   `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
     *   maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
     *   the maximum number of `TimeSeries` returned.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.monitoring.v3.TimeSeries|TimeSeries} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTimeSeriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTimeSeriesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        const defaultCallSettings = this._defaults['listTimeSeries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listTimeSeries stream %j', request);
        return this.descriptors.page.listTimeSeries.createStream(this.innerApiCalls.listTimeSeries, request, callSettings);
    }
    /**
     * Equivalent to `listTimeSeries`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name),
     *   organization or folder on which to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     *       organizations/[ORGANIZATION_ID]
     *       folders/[FOLDER_ID]
     * @param {string} request.filter
     *   Required. A [monitoring
     *   filter](https://cloud.google.com/monitoring/api/v3/filters) that specifies
     *   which time series should be returned.  The filter must specify a single
     *   metric type, and can additionally specify metric labels and other
     *   information. For example:
     *
     *       metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
     *           metric.labels.instance_name = "my-instance-name"
     * @param {google.monitoring.v3.TimeInterval} request.interval
     *   Required. The time interval for which results should be returned. Only time
     *   series that contain data points in the specified interval are included in
     *   the response.
     * @param {google.monitoring.v3.Aggregation} request.aggregation
     *   Specifies the alignment of data points in individual time series as
     *   well as how to combine the retrieved time series across specified labels.
     *
     *   By default (if no `aggregation` is explicitly specified), the raw time
     *   series data is returned.
     * @param {google.monitoring.v3.Aggregation} request.secondaryAggregation
     *   Apply a second aggregation after `aggregation` is applied. May only be
     *   specified if `aggregation` is specified.
     * @param {string} request.orderBy
     *   Unsupported: must be left blank. The points in each time series are
     *   currently returned in reverse time order (most recent to oldest).
     * @param {google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView} request.view
     *   Required. Specifies which information is returned about the time series.
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return. If
     *   `page_size` is empty or more than 100,000 results, the effective
     *   `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
     *   maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
     *   the maximum number of `TimeSeries` returned.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.monitoring.v3.TimeSeries|TimeSeries}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.list_time_series.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_ListTimeSeries_async
     */
    listTimeSeriesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        const defaultCallSettings = this._defaults['listTimeSeries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listTimeSeries iterate %j', request);
        return this.descriptors.page.listTimeSeries.asyncIterate(this.innerApiCalls['listTimeSeries'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified folderAlertPolicy resource name string.
     *
     * @param {string} folder
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    folderAlertPolicyPath(folder, alertPolicy) {
        return this.pathTemplates.folderAlertPolicyPathTemplate.render({
            folder: folder,
            alert_policy: alertPolicy,
        });
    }
    /**
     * Parse the folder from FolderAlertPolicy resource.
     *
     * @param {string} folderAlertPolicyName
     *   A fully-qualified path representing folder_alert_policy resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderAlertPolicyName(folderAlertPolicyName) {
        return this.pathTemplates.folderAlertPolicyPathTemplate.match(folderAlertPolicyName).folder;
    }
    /**
     * Parse the alert_policy from FolderAlertPolicy resource.
     *
     * @param {string} folderAlertPolicyName
     *   A fully-qualified path representing folder_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromFolderAlertPolicyName(folderAlertPolicyName) {
        return this.pathTemplates.folderAlertPolicyPathTemplate.match(folderAlertPolicyName).alert_policy;
    }
    /**
     * Return a fully-qualified folderAlertPolicyCondition resource name string.
     *
     * @param {string} folder
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    folderAlertPolicyConditionPath(folder, alertPolicy, condition) {
        return this.pathTemplates.folderAlertPolicyConditionPathTemplate.render({
            folder: folder,
            alert_policy: alertPolicy,
            condition: condition,
        });
    }
    /**
     * Parse the folder from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName) {
        return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(folderAlertPolicyConditionName).folder;
    }
    /**
     * Parse the alert_policy from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName) {
        return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(folderAlertPolicyConditionName).alert_policy;
    }
    /**
     * Parse the condition from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName) {
        return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(folderAlertPolicyConditionName).condition;
    }
    /**
     * Return a fully-qualified folderChannelDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    folderChannelDescriptorPath(folder, channelDescriptor) {
        return this.pathTemplates.folderChannelDescriptorPathTemplate.render({
            folder: folder,
            channel_descriptor: channelDescriptor,
        });
    }
    /**
     * Parse the folder from FolderChannelDescriptor resource.
     *
     * @param {string} folderChannelDescriptorName
     *   A fully-qualified path representing folder_channel_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderChannelDescriptorName(folderChannelDescriptorName) {
        return this.pathTemplates.folderChannelDescriptorPathTemplate.match(folderChannelDescriptorName).folder;
    }
    /**
     * Parse the channel_descriptor from FolderChannelDescriptor resource.
     *
     * @param {string} folderChannelDescriptorName
     *   A fully-qualified path representing folder_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromFolderChannelDescriptorName(folderChannelDescriptorName) {
        return this.pathTemplates.folderChannelDescriptorPathTemplate.match(folderChannelDescriptorName).channel_descriptor;
    }
    /**
     * Return a fully-qualified folderGroup resource name string.
     *
     * @param {string} folder
     * @param {string} group
     * @returns {string} Resource name string.
     */
    folderGroupPath(folder, group) {
        return this.pathTemplates.folderGroupPathTemplate.render({
            folder: folder,
            group: group,
        });
    }
    /**
     * Parse the folder from FolderGroup resource.
     *
     * @param {string} folderGroupName
     *   A fully-qualified path representing folder_group resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderGroupName(folderGroupName) {
        return this.pathTemplates.folderGroupPathTemplate.match(folderGroupName).folder;
    }
    /**
     * Parse the group from FolderGroup resource.
     *
     * @param {string} folderGroupName
     *   A fully-qualified path representing folder_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromFolderGroupName(folderGroupName) {
        return this.pathTemplates.folderGroupPathTemplate.match(folderGroupName).group;
    }
    /**
     * Return a fully-qualified folderMetricDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} metric_descriptor
     * @returns {string} Resource name string.
     */
    folderMetricDescriptorPath(folder, metricDescriptor) {
        return this.pathTemplates.folderMetricDescriptorPathTemplate.render({
            folder: folder,
            metric_descriptor: metricDescriptor,
        });
    }
    /**
     * Parse the folder from FolderMetricDescriptor resource.
     *
     * @param {string} folderMetricDescriptorName
     *   A fully-qualified path representing folder_metric_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderMetricDescriptorName(folderMetricDescriptorName) {
        return this.pathTemplates.folderMetricDescriptorPathTemplate.match(folderMetricDescriptorName).folder;
    }
    /**
     * Parse the metric_descriptor from FolderMetricDescriptor resource.
     *
     * @param {string} folderMetricDescriptorName
     *   A fully-qualified path representing folder_metric_descriptor resource.
     * @returns {string} A string representing the metric_descriptor.
     */
    matchMetricDescriptorFromFolderMetricDescriptorName(folderMetricDescriptorName) {
        return this.pathTemplates.folderMetricDescriptorPathTemplate.match(folderMetricDescriptorName).metric_descriptor;
    }
    /**
     * Return a fully-qualified folderMonitoredResourceDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} monitored_resource_descriptor
     * @returns {string} Resource name string.
     */
    folderMonitoredResourceDescriptorPath(folder, monitoredResourceDescriptor) {
        return this.pathTemplates.folderMonitoredResourceDescriptorPathTemplate.render({
            folder: folder,
            monitored_resource_descriptor: monitoredResourceDescriptor,
        });
    }
    /**
     * Parse the folder from FolderMonitoredResourceDescriptor resource.
     *
     * @param {string} folderMonitoredResourceDescriptorName
     *   A fully-qualified path representing folder_monitored_resource_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderMonitoredResourceDescriptorName(folderMonitoredResourceDescriptorName) {
        return this.pathTemplates.folderMonitoredResourceDescriptorPathTemplate.match(folderMonitoredResourceDescriptorName).folder;
    }
    /**
     * Parse the monitored_resource_descriptor from FolderMonitoredResourceDescriptor resource.
     *
     * @param {string} folderMonitoredResourceDescriptorName
     *   A fully-qualified path representing folder_monitored_resource_descriptor resource.
     * @returns {string} A string representing the monitored_resource_descriptor.
     */
    matchMonitoredResourceDescriptorFromFolderMonitoredResourceDescriptorName(folderMonitoredResourceDescriptorName) {
        return this.pathTemplates.folderMonitoredResourceDescriptorPathTemplate.match(folderMonitoredResourceDescriptorName).monitored_resource_descriptor;
    }
    /**
     * Return a fully-qualified folderNotificationChannel resource name string.
     *
     * @param {string} folder
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    folderNotificationChannelPath(folder, notificationChannel) {
        return this.pathTemplates.folderNotificationChannelPathTemplate.render({
            folder: folder,
            notification_channel: notificationChannel,
        });
    }
    /**
     * Parse the folder from FolderNotificationChannel resource.
     *
     * @param {string} folderNotificationChannelName
     *   A fully-qualified path representing folder_notification_channel resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderNotificationChannelName(folderNotificationChannelName) {
        return this.pathTemplates.folderNotificationChannelPathTemplate.match(folderNotificationChannelName).folder;
    }
    /**
     * Parse the notification_channel from FolderNotificationChannel resource.
     *
     * @param {string} folderNotificationChannelName
     *   A fully-qualified path representing folder_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromFolderNotificationChannelName(folderNotificationChannelName) {
        return this.pathTemplates.folderNotificationChannelPathTemplate.match(folderNotificationChannelName).notification_channel;
    }
    /**
     * Return a fully-qualified folderService resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @returns {string} Resource name string.
     */
    folderServicePath(folder, service) {
        return this.pathTemplates.folderServicePathTemplate.render({
            folder: folder,
            service: service,
        });
    }
    /**
     * Parse the folder from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceName(folderServiceName) {
        return this.pathTemplates.folderServicePathTemplate.match(folderServiceName).folder;
    }
    /**
     * Parse the service from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceName(folderServiceName) {
        return this.pathTemplates.folderServicePathTemplate.match(folderServiceName).service;
    }
    /**
     * Return a fully-qualified folderServiceServiceLevelObjective resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    folderServiceServiceLevelObjectivePath(folder, service, serviceLevelObjective) {
        return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.render({
            folder: folder,
            service: service,
            service_level_objective: serviceLevelObjective,
        });
    }
    /**
     * Parse the folder from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName) {
        return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).folder;
    }
    /**
     * Parse the service from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName) {
        return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).service;
    }
    /**
     * Parse the service_level_objective from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName) {
        return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).service_level_objective;
    }
    /**
     * Return a fully-qualified folderUptimeCheckConfig resource name string.
     *
     * @param {string} folder
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    folderUptimeCheckConfigPath(folder, uptimeCheckConfig) {
        return this.pathTemplates.folderUptimeCheckConfigPathTemplate.render({
            folder: folder,
            uptime_check_config: uptimeCheckConfig,
        });
    }
    /**
     * Parse the folder from FolderUptimeCheckConfig resource.
     *
     * @param {string} folderUptimeCheckConfigName
     *   A fully-qualified path representing folder_uptime_check_config resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName) {
        return this.pathTemplates.folderUptimeCheckConfigPathTemplate.match(folderUptimeCheckConfigName).folder;
    }
    /**
     * Parse the uptime_check_config from FolderUptimeCheckConfig resource.
     *
     * @param {string} folderUptimeCheckConfigName
     *   A fully-qualified path representing folder_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName) {
        return this.pathTemplates.folderUptimeCheckConfigPathTemplate.match(folderUptimeCheckConfigName).uptime_check_config;
    }
    /**
     * Return a fully-qualified organizationAlertPolicy resource name string.
     *
     * @param {string} organization
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    organizationAlertPolicyPath(organization, alertPolicy) {
        return this.pathTemplates.organizationAlertPolicyPathTemplate.render({
            organization: organization,
            alert_policy: alertPolicy,
        });
    }
    /**
     * Parse the organization from OrganizationAlertPolicy resource.
     *
     * @param {string} organizationAlertPolicyName
     *   A fully-qualified path representing organization_alert_policy resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationAlertPolicyName(organizationAlertPolicyName) {
        return this.pathTemplates.organizationAlertPolicyPathTemplate.match(organizationAlertPolicyName).organization;
    }
    /**
     * Parse the alert_policy from OrganizationAlertPolicy resource.
     *
     * @param {string} organizationAlertPolicyName
     *   A fully-qualified path representing organization_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromOrganizationAlertPolicyName(organizationAlertPolicyName) {
        return this.pathTemplates.organizationAlertPolicyPathTemplate.match(organizationAlertPolicyName).alert_policy;
    }
    /**
     * Return a fully-qualified organizationAlertPolicyCondition resource name string.
     *
     * @param {string} organization
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    organizationAlertPolicyConditionPath(organization, alertPolicy, condition) {
        return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.render({
            organization: organization,
            alert_policy: alertPolicy,
            condition: condition,
        });
    }
    /**
     * Parse the organization from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName) {
        return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(organizationAlertPolicyConditionName).organization;
    }
    /**
     * Parse the alert_policy from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName) {
        return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(organizationAlertPolicyConditionName).alert_policy;
    }
    /**
     * Parse the condition from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName) {
        return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(organizationAlertPolicyConditionName).condition;
    }
    /**
     * Return a fully-qualified organizationChannelDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    organizationChannelDescriptorPath(organization, channelDescriptor) {
        return this.pathTemplates.organizationChannelDescriptorPathTemplate.render({
            organization: organization,
            channel_descriptor: channelDescriptor,
        });
    }
    /**
     * Parse the organization from OrganizationChannelDescriptor resource.
     *
     * @param {string} organizationChannelDescriptorName
     *   A fully-qualified path representing organization_channel_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationChannelDescriptorName(organizationChannelDescriptorName) {
        return this.pathTemplates.organizationChannelDescriptorPathTemplate.match(organizationChannelDescriptorName).organization;
    }
    /**
     * Parse the channel_descriptor from OrganizationChannelDescriptor resource.
     *
     * @param {string} organizationChannelDescriptorName
     *   A fully-qualified path representing organization_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromOrganizationChannelDescriptorName(organizationChannelDescriptorName) {
        return this.pathTemplates.organizationChannelDescriptorPathTemplate.match(organizationChannelDescriptorName).channel_descriptor;
    }
    /**
     * Return a fully-qualified organizationGroup resource name string.
     *
     * @param {string} organization
     * @param {string} group
     * @returns {string} Resource name string.
     */
    organizationGroupPath(organization, group) {
        return this.pathTemplates.organizationGroupPathTemplate.render({
            organization: organization,
            group: group,
        });
    }
    /**
     * Parse the organization from OrganizationGroup resource.
     *
     * @param {string} organizationGroupName
     *   A fully-qualified path representing organization_group resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationGroupName(organizationGroupName) {
        return this.pathTemplates.organizationGroupPathTemplate.match(organizationGroupName).organization;
    }
    /**
     * Parse the group from OrganizationGroup resource.
     *
     * @param {string} organizationGroupName
     *   A fully-qualified path representing organization_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromOrganizationGroupName(organizationGroupName) {
        return this.pathTemplates.organizationGroupPathTemplate.match(organizationGroupName).group;
    }
    /**
     * Return a fully-qualified organizationMetricDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} metric_descriptor
     * @returns {string} Resource name string.
     */
    organizationMetricDescriptorPath(organization, metricDescriptor) {
        return this.pathTemplates.organizationMetricDescriptorPathTemplate.render({
            organization: organization,
            metric_descriptor: metricDescriptor,
        });
    }
    /**
     * Parse the organization from OrganizationMetricDescriptor resource.
     *
     * @param {string} organizationMetricDescriptorName
     *   A fully-qualified path representing organization_metric_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationMetricDescriptorName(organizationMetricDescriptorName) {
        return this.pathTemplates.organizationMetricDescriptorPathTemplate.match(organizationMetricDescriptorName).organization;
    }
    /**
     * Parse the metric_descriptor from OrganizationMetricDescriptor resource.
     *
     * @param {string} organizationMetricDescriptorName
     *   A fully-qualified path representing organization_metric_descriptor resource.
     * @returns {string} A string representing the metric_descriptor.
     */
    matchMetricDescriptorFromOrganizationMetricDescriptorName(organizationMetricDescriptorName) {
        return this.pathTemplates.organizationMetricDescriptorPathTemplate.match(organizationMetricDescriptorName).metric_descriptor;
    }
    /**
     * Return a fully-qualified organizationMonitoredResourceDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} monitored_resource_descriptor
     * @returns {string} Resource name string.
     */
    organizationMonitoredResourceDescriptorPath(organization, monitoredResourceDescriptor) {
        return this.pathTemplates.organizationMonitoredResourceDescriptorPathTemplate.render({
            organization: organization,
            monitored_resource_descriptor: monitoredResourceDescriptor,
        });
    }
    /**
     * Parse the organization from OrganizationMonitoredResourceDescriptor resource.
     *
     * @param {string} organizationMonitoredResourceDescriptorName
     *   A fully-qualified path representing organization_monitored_resource_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationMonitoredResourceDescriptorName(organizationMonitoredResourceDescriptorName) {
        return this.pathTemplates.organizationMonitoredResourceDescriptorPathTemplate.match(organizationMonitoredResourceDescriptorName).organization;
    }
    /**
     * Parse the monitored_resource_descriptor from OrganizationMonitoredResourceDescriptor resource.
     *
     * @param {string} organizationMonitoredResourceDescriptorName
     *   A fully-qualified path representing organization_monitored_resource_descriptor resource.
     * @returns {string} A string representing the monitored_resource_descriptor.
     */
    matchMonitoredResourceDescriptorFromOrganizationMonitoredResourceDescriptorName(organizationMonitoredResourceDescriptorName) {
        return this.pathTemplates.organizationMonitoredResourceDescriptorPathTemplate.match(organizationMonitoredResourceDescriptorName).monitored_resource_descriptor;
    }
    /**
     * Return a fully-qualified organizationNotificationChannel resource name string.
     *
     * @param {string} organization
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    organizationNotificationChannelPath(organization, notificationChannel) {
        return this.pathTemplates.organizationNotificationChannelPathTemplate.render({
            organization: organization,
            notification_channel: notificationChannel,
        });
    }
    /**
     * Parse the organization from OrganizationNotificationChannel resource.
     *
     * @param {string} organizationNotificationChannelName
     *   A fully-qualified path representing organization_notification_channel resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationNotificationChannelName(organizationNotificationChannelName) {
        return this.pathTemplates.organizationNotificationChannelPathTemplate.match(organizationNotificationChannelName).organization;
    }
    /**
     * Parse the notification_channel from OrganizationNotificationChannel resource.
     *
     * @param {string} organizationNotificationChannelName
     *   A fully-qualified path representing organization_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromOrganizationNotificationChannelName(organizationNotificationChannelName) {
        return this.pathTemplates.organizationNotificationChannelPathTemplate.match(organizationNotificationChannelName).notification_channel;
    }
    /**
     * Return a fully-qualified organizationService resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @returns {string} Resource name string.
     */
    organizationServicePath(organization, service) {
        return this.pathTemplates.organizationServicePathTemplate.render({
            organization: organization,
            service: service,
        });
    }
    /**
     * Parse the organization from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceName(organizationServiceName) {
        return this.pathTemplates.organizationServicePathTemplate.match(organizationServiceName).organization;
    }
    /**
     * Parse the service from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceName(organizationServiceName) {
        return this.pathTemplates.organizationServicePathTemplate.match(organizationServiceName).service;
    }
    /**
     * Return a fully-qualified organizationServiceServiceLevelObjective resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    organizationServiceServiceLevelObjectivePath(organization, service, serviceLevelObjective) {
        return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.render({
            organization: organization,
            service: service,
            service_level_objective: serviceLevelObjective,
        });
    }
    /**
     * Parse the organization from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName) {
        return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).organization;
    }
    /**
     * Parse the service from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName) {
        return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).service;
    }
    /**
     * Parse the service_level_objective from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName) {
        return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).service_level_objective;
    }
    /**
     * Return a fully-qualified organizationUptimeCheckConfig resource name string.
     *
     * @param {string} organization
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    organizationUptimeCheckConfigPath(organization, uptimeCheckConfig) {
        return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.render({
            organization: organization,
            uptime_check_config: uptimeCheckConfig,
        });
    }
    /**
     * Parse the organization from OrganizationUptimeCheckConfig resource.
     *
     * @param {string} organizationUptimeCheckConfigName
     *   A fully-qualified path representing organization_uptime_check_config resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName) {
        return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.match(organizationUptimeCheckConfigName).organization;
    }
    /**
     * Parse the uptime_check_config from OrganizationUptimeCheckConfig resource.
     *
     * @param {string} organizationUptimeCheckConfigName
     *   A fully-qualified path representing organization_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName) {
        return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.match(organizationUptimeCheckConfigName).uptime_check_config;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified projectAlertPolicy resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    projectAlertPolicyPath(project, alertPolicy) {
        return this.pathTemplates.projectAlertPolicyPathTemplate.render({
            project: project,
            alert_policy: alertPolicy,
        });
    }
    /**
     * Parse the project from ProjectAlertPolicy resource.
     *
     * @param {string} projectAlertPolicyName
     *   A fully-qualified path representing project_alert_policy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAlertPolicyName(projectAlertPolicyName) {
        return this.pathTemplates.projectAlertPolicyPathTemplate.match(projectAlertPolicyName).project;
    }
    /**
     * Parse the alert_policy from ProjectAlertPolicy resource.
     *
     * @param {string} projectAlertPolicyName
     *   A fully-qualified path representing project_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromProjectAlertPolicyName(projectAlertPolicyName) {
        return this.pathTemplates.projectAlertPolicyPathTemplate.match(projectAlertPolicyName).alert_policy;
    }
    /**
     * Return a fully-qualified projectAlertPolicyCondition resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    projectAlertPolicyConditionPath(project, alertPolicy, condition) {
        return this.pathTemplates.projectAlertPolicyConditionPathTemplate.render({
            project: project,
            alert_policy: alertPolicy,
            condition: condition,
        });
    }
    /**
     * Parse the project from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName) {
        return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(projectAlertPolicyConditionName).project;
    }
    /**
     * Parse the alert_policy from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName) {
        return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(projectAlertPolicyConditionName).alert_policy;
    }
    /**
     * Parse the condition from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName) {
        return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(projectAlertPolicyConditionName).condition;
    }
    /**
     * Return a fully-qualified projectChannelDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    projectChannelDescriptorPath(project, channelDescriptor) {
        return this.pathTemplates.projectChannelDescriptorPathTemplate.render({
            project: project,
            channel_descriptor: channelDescriptor,
        });
    }
    /**
     * Parse the project from ProjectChannelDescriptor resource.
     *
     * @param {string} projectChannelDescriptorName
     *   A fully-qualified path representing project_channel_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectChannelDescriptorName(projectChannelDescriptorName) {
        return this.pathTemplates.projectChannelDescriptorPathTemplate.match(projectChannelDescriptorName).project;
    }
    /**
     * Parse the channel_descriptor from ProjectChannelDescriptor resource.
     *
     * @param {string} projectChannelDescriptorName
     *   A fully-qualified path representing project_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromProjectChannelDescriptorName(projectChannelDescriptorName) {
        return this.pathTemplates.projectChannelDescriptorPathTemplate.match(projectChannelDescriptorName).channel_descriptor;
    }
    /**
     * Return a fully-qualified projectGroup resource name string.
     *
     * @param {string} project
     * @param {string} group
     * @returns {string} Resource name string.
     */
    projectGroupPath(project, group) {
        return this.pathTemplates.projectGroupPathTemplate.render({
            project: project,
            group: group,
        });
    }
    /**
     * Parse the project from ProjectGroup resource.
     *
     * @param {string} projectGroupName
     *   A fully-qualified path representing project_group resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectGroupName(projectGroupName) {
        return this.pathTemplates.projectGroupPathTemplate.match(projectGroupName).project;
    }
    /**
     * Parse the group from ProjectGroup resource.
     *
     * @param {string} projectGroupName
     *   A fully-qualified path representing project_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromProjectGroupName(projectGroupName) {
        return this.pathTemplates.projectGroupPathTemplate.match(projectGroupName).group;
    }
    /**
     * Return a fully-qualified projectMetricDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} metric_descriptor
     * @returns {string} Resource name string.
     */
    projectMetricDescriptorPath(project, metricDescriptor) {
        return this.pathTemplates.projectMetricDescriptorPathTemplate.render({
            project: project,
            metric_descriptor: metricDescriptor,
        });
    }
    /**
     * Parse the project from ProjectMetricDescriptor resource.
     *
     * @param {string} projectMetricDescriptorName
     *   A fully-qualified path representing project_metric_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectMetricDescriptorName(projectMetricDescriptorName) {
        return this.pathTemplates.projectMetricDescriptorPathTemplate.match(projectMetricDescriptorName).project;
    }
    /**
     * Parse the metric_descriptor from ProjectMetricDescriptor resource.
     *
     * @param {string} projectMetricDescriptorName
     *   A fully-qualified path representing project_metric_descriptor resource.
     * @returns {string} A string representing the metric_descriptor.
     */
    matchMetricDescriptorFromProjectMetricDescriptorName(projectMetricDescriptorName) {
        return this.pathTemplates.projectMetricDescriptorPathTemplate.match(projectMetricDescriptorName).metric_descriptor;
    }
    /**
     * Return a fully-qualified projectMonitoredResourceDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} monitored_resource_descriptor
     * @returns {string} Resource name string.
     */
    projectMonitoredResourceDescriptorPath(project, monitoredResourceDescriptor) {
        return this.pathTemplates.projectMonitoredResourceDescriptorPathTemplate.render({
            project: project,
            monitored_resource_descriptor: monitoredResourceDescriptor,
        });
    }
    /**
     * Parse the project from ProjectMonitoredResourceDescriptor resource.
     *
     * @param {string} projectMonitoredResourceDescriptorName
     *   A fully-qualified path representing project_monitored_resource_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectMonitoredResourceDescriptorName(projectMonitoredResourceDescriptorName) {
        return this.pathTemplates.projectMonitoredResourceDescriptorPathTemplate.match(projectMonitoredResourceDescriptorName).project;
    }
    /**
     * Parse the monitored_resource_descriptor from ProjectMonitoredResourceDescriptor resource.
     *
     * @param {string} projectMonitoredResourceDescriptorName
     *   A fully-qualified path representing project_monitored_resource_descriptor resource.
     * @returns {string} A string representing the monitored_resource_descriptor.
     */
    matchMonitoredResourceDescriptorFromProjectMonitoredResourceDescriptorName(projectMonitoredResourceDescriptorName) {
        return this.pathTemplates.projectMonitoredResourceDescriptorPathTemplate.match(projectMonitoredResourceDescriptorName).monitored_resource_descriptor;
    }
    /**
     * Return a fully-qualified projectNotificationChannel resource name string.
     *
     * @param {string} project
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    projectNotificationChannelPath(project, notificationChannel) {
        return this.pathTemplates.projectNotificationChannelPathTemplate.render({
            project: project,
            notification_channel: notificationChannel,
        });
    }
    /**
     * Parse the project from ProjectNotificationChannel resource.
     *
     * @param {string} projectNotificationChannelName
     *   A fully-qualified path representing project_notification_channel resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectNotificationChannelName(projectNotificationChannelName) {
        return this.pathTemplates.projectNotificationChannelPathTemplate.match(projectNotificationChannelName).project;
    }
    /**
     * Parse the notification_channel from ProjectNotificationChannel resource.
     *
     * @param {string} projectNotificationChannelName
     *   A fully-qualified path representing project_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromProjectNotificationChannelName(projectNotificationChannelName) {
        return this.pathTemplates.projectNotificationChannelPathTemplate.match(projectNotificationChannelName).notification_channel;
    }
    /**
     * Return a fully-qualified projectService resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @returns {string} Resource name string.
     */
    projectServicePath(project, service) {
        return this.pathTemplates.projectServicePathTemplate.render({
            project: project,
            service: service,
        });
    }
    /**
     * Parse the project from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceName(projectServiceName) {
        return this.pathTemplates.projectServicePathTemplate.match(projectServiceName).project;
    }
    /**
     * Parse the service from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceName(projectServiceName) {
        return this.pathTemplates.projectServicePathTemplate.match(projectServiceName).service;
    }
    /**
     * Return a fully-qualified projectServiceServiceLevelObjective resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    projectServiceServiceLevelObjectivePath(project, service, serviceLevelObjective) {
        return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.render({
            project: project,
            service: service,
            service_level_objective: serviceLevelObjective,
        });
    }
    /**
     * Parse the project from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName) {
        return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).project;
    }
    /**
     * Parse the service from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName) {
        return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).service;
    }
    /**
     * Parse the service_level_objective from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName) {
        return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).service_level_objective;
    }
    /**
     * Return a fully-qualified projectTimeSeries resource name string.
     *
     * @param {string} project
     * @param {string} time_series
     * @returns {string} Resource name string.
     */
    projectTimeSeriesPath(project, timeSeries) {
        return this.pathTemplates.projectTimeSeriesPathTemplate.render({
            project: project,
            time_series: timeSeries,
        });
    }
    /**
     * Parse the project from ProjectTimeSeries resource.
     *
     * @param {string} projectTimeSeriesName
     *   A fully-qualified path representing project_time_series resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectTimeSeriesName(projectTimeSeriesName) {
        return this.pathTemplates.projectTimeSeriesPathTemplate.match(projectTimeSeriesName).project;
    }
    /**
     * Parse the time_series from ProjectTimeSeries resource.
     *
     * @param {string} projectTimeSeriesName
     *   A fully-qualified path representing project_time_series resource.
     * @returns {string} A string representing the time_series.
     */
    matchTimeSeriesFromProjectTimeSeriesName(projectTimeSeriesName) {
        return this.pathTemplates.projectTimeSeriesPathTemplate.match(projectTimeSeriesName).time_series;
    }
    /**
     * Return a fully-qualified projectUptimeCheckConfig resource name string.
     *
     * @param {string} project
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    projectUptimeCheckConfigPath(project, uptimeCheckConfig) {
        return this.pathTemplates.projectUptimeCheckConfigPathTemplate.render({
            project: project,
            uptime_check_config: uptimeCheckConfig,
        });
    }
    /**
     * Parse the project from ProjectUptimeCheckConfig resource.
     *
     * @param {string} projectUptimeCheckConfigName
     *   A fully-qualified path representing project_uptime_check_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName) {
        return this.pathTemplates.projectUptimeCheckConfigPathTemplate.match(projectUptimeCheckConfigName).project;
    }
    /**
     * Parse the uptime_check_config from ProjectUptimeCheckConfig resource.
     *
     * @param {string} projectUptimeCheckConfigName
     *   A fully-qualified path representing project_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName) {
        return this.pathTemplates.projectUptimeCheckConfigPathTemplate.match(projectUptimeCheckConfigName).uptime_check_config;
    }
    /**
     * Return a fully-qualified snooze resource name string.
     *
     * @param {string} project
     * @param {string} snooze
     * @returns {string} Resource name string.
     */
    snoozePath(project, snooze) {
        return this.pathTemplates.snoozePathTemplate.render({
            project: project,
            snooze: snooze,
        });
    }
    /**
     * Parse the project from Snooze resource.
     *
     * @param {string} snoozeName
     *   A fully-qualified path representing Snooze resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnoozeName(snoozeName) {
        return this.pathTemplates.snoozePathTemplate.match(snoozeName).project;
    }
    /**
     * Parse the snooze from Snooze resource.
     *
     * @param {string} snoozeName
     *   A fully-qualified path representing Snooze resource.
     * @returns {string} A string representing the snooze.
     */
    matchSnoozeFromSnoozeName(snoozeName) {
        return this.pathTemplates.snoozePathTemplate.match(snoozeName).snooze;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.metricServiceStub && !this._terminated) {
            return this.metricServiceStub.then(stub => {
                this._log.info('ending gRPC channel');
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.MetricServiceClient = MetricServiceClient;
//# sourceMappingURL=metric_service_client.js.map