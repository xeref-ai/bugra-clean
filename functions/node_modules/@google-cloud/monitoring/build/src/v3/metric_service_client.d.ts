import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Manages metric descriptors, monitored resource descriptors, and
 *  time series data.
 * @class
 * @memberof v3
 */
export declare class MetricServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    private _log;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    metricServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of MetricServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new MetricServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets a single monitored resource descriptor.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The monitored resource descriptor to get.  The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]/monitoredResourceDescriptors/[RESOURCE_TYPE]
     *
     *   The `[RESOURCE_TYPE]` is a predefined type, such as
     *   `cloudsql_database`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.MonitoredResourceDescriptor|MonitoredResourceDescriptor}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.get_monitored_resource_descriptor.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_GetMonitoredResourceDescriptor_async
     */
    getMonitoredResourceDescriptor(request?: protos.google.monitoring.v3.IGetMonitoredResourceDescriptorRequest, options?: CallOptions): Promise<[
        protos.google.api.IMonitoredResourceDescriptor,
        protos.google.monitoring.v3.IGetMonitoredResourceDescriptorRequest | undefined,
        {} | undefined
    ]>;
    getMonitoredResourceDescriptor(request: protos.google.monitoring.v3.IGetMonitoredResourceDescriptorRequest, options: CallOptions, callback: Callback<protos.google.api.IMonitoredResourceDescriptor, protos.google.monitoring.v3.IGetMonitoredResourceDescriptorRequest | null | undefined, {} | null | undefined>): void;
    getMonitoredResourceDescriptor(request: protos.google.monitoring.v3.IGetMonitoredResourceDescriptorRequest, callback: Callback<protos.google.api.IMonitoredResourceDescriptor, protos.google.monitoring.v3.IGetMonitoredResourceDescriptorRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a single metric descriptor.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The metric descriptor on which to execute the request. The format
     *   is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]
     *
     *   An example value of `[METRIC_ID]` is
     *   `"compute.googleapis.com/instance/disk/read_bytes_count"`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.MetricDescriptor|MetricDescriptor}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.get_metric_descriptor.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_GetMetricDescriptor_async
     */
    getMetricDescriptor(request?: protos.google.monitoring.v3.IGetMetricDescriptorRequest, options?: CallOptions): Promise<[
        protos.google.api.IMetricDescriptor,
        protos.google.monitoring.v3.IGetMetricDescriptorRequest | undefined,
        {} | undefined
    ]>;
    getMetricDescriptor(request: protos.google.monitoring.v3.IGetMetricDescriptorRequest, options: CallOptions, callback: Callback<protos.google.api.IMetricDescriptor, protos.google.monitoring.v3.IGetMetricDescriptorRequest | null | undefined, {} | null | undefined>): void;
    getMetricDescriptor(request: protos.google.monitoring.v3.IGetMetricDescriptorRequest, callback: Callback<protos.google.api.IMetricDescriptor, protos.google.monitoring.v3.IGetMetricDescriptorRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new metric descriptor.
     * The creation is executed asynchronously.
     * User-created metric descriptors define
     * [custom metrics](https://cloud.google.com/monitoring/custom-metrics).
     * The metric descriptor is updated if it already exists,
     * except that metric labels are never removed.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *   4
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {google.api.MetricDescriptor} request.metricDescriptor
     *   Required. The new [custom
     *   metric](https://cloud.google.com/monitoring/custom-metrics) descriptor.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.MetricDescriptor|MetricDescriptor}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.create_metric_descriptor.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_CreateMetricDescriptor_async
     */
    createMetricDescriptor(request?: protos.google.monitoring.v3.ICreateMetricDescriptorRequest, options?: CallOptions): Promise<[
        protos.google.api.IMetricDescriptor,
        protos.google.monitoring.v3.ICreateMetricDescriptorRequest | undefined,
        {} | undefined
    ]>;
    createMetricDescriptor(request: protos.google.monitoring.v3.ICreateMetricDescriptorRequest, options: CallOptions, callback: Callback<protos.google.api.IMetricDescriptor, protos.google.monitoring.v3.ICreateMetricDescriptorRequest | null | undefined, {} | null | undefined>): void;
    createMetricDescriptor(request: protos.google.monitoring.v3.ICreateMetricDescriptorRequest, callback: Callback<protos.google.api.IMetricDescriptor, protos.google.monitoring.v3.ICreateMetricDescriptorRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a metric descriptor. Only user-created
     * [custom metrics](https://cloud.google.com/monitoring/custom-metrics) can be
     * deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The metric descriptor on which to execute the request. The format
     *   is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]
     *
     *   An example of `[METRIC_ID]` is:
     *   `"custom.googleapis.com/my_test_metric"`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.delete_metric_descriptor.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_DeleteMetricDescriptor_async
     */
    deleteMetricDescriptor(request?: protos.google.monitoring.v3.IDeleteMetricDescriptorRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.monitoring.v3.IDeleteMetricDescriptorRequest | undefined,
        {} | undefined
    ]>;
    deleteMetricDescriptor(request: protos.google.monitoring.v3.IDeleteMetricDescriptorRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.v3.IDeleteMetricDescriptorRequest | null | undefined, {} | null | undefined>): void;
    deleteMetricDescriptor(request: protos.google.monitoring.v3.IDeleteMetricDescriptorRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.v3.IDeleteMetricDescriptorRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates or adds data to one or more time series.
     * The response is empty if all time series in the request were written.
     * If any time series could not be written, a corresponding failure message is
     * included in the error response.
     * This method does not support
     * [resource locations constraint of an organization
     * policy](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations#setting_the_organization_policy).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {number[]} request.timeSeries
     *   Required. The new data to be added to a list of time series.
     *   Adds at most one data point to each of several time series.  The new data
     *   point must be more recent than any other point in its time series.  Each
     *   `TimeSeries` value must fully specify a unique time series by supplying
     *   all label values for the metric and the monitored resource.
     *
     *   The maximum number of `TimeSeries` objects per `Create` request is 200.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.create_time_series.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_CreateTimeSeries_async
     */
    createTimeSeries(request?: protos.google.monitoring.v3.ICreateTimeSeriesRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.monitoring.v3.ICreateTimeSeriesRequest | undefined,
        {} | undefined
    ]>;
    createTimeSeries(request: protos.google.monitoring.v3.ICreateTimeSeriesRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.v3.ICreateTimeSeriesRequest | null | undefined, {} | null | undefined>): void;
    createTimeSeries(request: protos.google.monitoring.v3.ICreateTimeSeriesRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.v3.ICreateTimeSeriesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates or adds data to one or more service time series. A service time
     * series is a time series for a metric from a Google Cloud service. The
     * response is empty if all time series in the request were written. If any
     * time series could not be written, a corresponding failure message is
     * included in the error response. This endpoint rejects writes to
     * user-defined metrics.
     * This method is only for use by Google Cloud services. Use
     * {@link protos.google.monitoring.v3.MetricService.CreateTimeSeries|projects.timeSeries.create}
     * instead.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {number[]} request.timeSeries
     *   Required. The new data to be added to a list of time series.
     *   Adds at most one data point to each of several time series.  The new data
     *   point must be more recent than any other point in its time series.  Each
     *   `TimeSeries` value must fully specify a unique time series by supplying
     *   all label values for the metric and the monitored resource.
     *
     *   The maximum number of `TimeSeries` objects per `Create` request is 200.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.create_service_time_series.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_CreateServiceTimeSeries_async
     */
    createServiceTimeSeries(request?: protos.google.monitoring.v3.ICreateTimeSeriesRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.monitoring.v3.ICreateTimeSeriesRequest | undefined,
        {} | undefined
    ]>;
    createServiceTimeSeries(request: protos.google.monitoring.v3.ICreateTimeSeriesRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.v3.ICreateTimeSeriesRequest | null | undefined, {} | null | undefined>): void;
    createServiceTimeSeries(request: protos.google.monitoring.v3.ICreateTimeSeriesRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.v3.ICreateTimeSeriesRequest | null | undefined, {} | null | undefined>): void;
    /**
    * Lists monitored resource descriptors that match a filter.
    *
    * @param {Object} request
    *   The request object that will be sent.
    * @param {string} request.name
    *   Required. The
    *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
    *   to execute the request. The format is:
    *
    *       projects/[PROJECT_ID_OR_NUMBER]
    * @param {string} request.filter
    *   An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
    *   describing the descriptors to be returned.  The filter can reference the
    *   descriptor's type and labels. For example, the following filter returns
    *   only Google Compute Engine descriptors that have an `id` label:
    *
    *       resource.type = starts_with("gce_") AND resource.label:id
    * @param {number} request.pageSize
    *   A positive number that is the maximum number of results to return.
    * @param {string} request.pageToken
    *   If this field is not empty then it must contain the `nextPageToken` value
    *   returned by a previous call to this method.  Using this field causes the
    *   method to return additional results from the previous method call.
    * @param {object} [options]
    *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
    * @returns {Promise} - The promise which resolves to an array.
    *   The first element of the array is Array of {@link protos.google.api.MonitoredResourceDescriptor|MonitoredResourceDescriptor}.
    *   The client library will perform auto-pagination by default: it will call the API as many
    *   times as needed and will merge results from all the pages into this array.
    *   Note that it can affect your quota.
    *   We recommend using `listMonitoredResourceDescriptorsAsync()`
    *   method described below for async iteration which you can stop as needed.
    *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
    *   for more details and examples.
    */
    listMonitoredResourceDescriptors(request?: protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, options?: CallOptions): Promise<[
        protos.google.api.IMonitoredResourceDescriptor[],
        protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest | null,
        protos.google.monitoring.v3.IListMonitoredResourceDescriptorsResponse
    ]>;
    listMonitoredResourceDescriptors(request: protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, options: CallOptions, callback: PaginationCallback<protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, protos.google.monitoring.v3.IListMonitoredResourceDescriptorsResponse | null | undefined, protos.google.api.IMonitoredResourceDescriptor>): void;
    listMonitoredResourceDescriptors(request: protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, callback: PaginationCallback<protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, protos.google.monitoring.v3.IListMonitoredResourceDescriptorsResponse | null | undefined, protos.google.api.IMonitoredResourceDescriptor>): void;
    /**
     * Equivalent to `listMonitoredResourceDescriptors`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} request.filter
     *   An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   describing the descriptors to be returned.  The filter can reference the
     *   descriptor's type and labels. For example, the following filter returns
     *   only Google Compute Engine descriptors that have an `id` label:
     *
     *       resource.type = starts_with("gce_") AND resource.label:id
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.api.MonitoredResourceDescriptor|MonitoredResourceDescriptor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMonitoredResourceDescriptorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMonitoredResourceDescriptorsStream(request?: protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listMonitoredResourceDescriptors`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} request.filter
     *   An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   describing the descriptors to be returned.  The filter can reference the
     *   descriptor's type and labels. For example, the following filter returns
     *   only Google Compute Engine descriptors that have an `id` label:
     *
     *       resource.type = starts_with("gce_") AND resource.label:id
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.api.MonitoredResourceDescriptor|MonitoredResourceDescriptor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.list_monitored_resource_descriptors.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_ListMonitoredResourceDescriptors_async
     */
    listMonitoredResourceDescriptorsAsync(request?: protos.google.monitoring.v3.IListMonitoredResourceDescriptorsRequest, options?: CallOptions): AsyncIterable<protos.google.api.IMonitoredResourceDescriptor>;
    /**
    * Lists metric descriptors that match a filter.
    *
    * @param {Object} request
    *   The request object that will be sent.
    * @param {string} request.name
    *   Required. The
    *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
    *   to execute the request. The format is:
    *
    *       projects/[PROJECT_ID_OR_NUMBER]
    * @param {string} [request.filter]
    *   Optional. If this field is empty, all custom and
    *   system-defined metric descriptors are returned.
    *   Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
    *   specifies which metric descriptors are to be
    *   returned. For example, the following filter matches all
    *   [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
    *
    *       metric.type = starts_with("custom.googleapis.com/")
    * @param {number} [request.pageSize]
    *   Optional. A positive number that is the maximum number of results to
    *   return. The default and maximum value is 10,000. If a page_size <= 0 or >
    *   10,000 is submitted, will instead return a maximum of 10,000 results.
    * @param {string} [request.pageToken]
    *   Optional. If this field is not empty then it must contain the
    *   `nextPageToken` value returned by a previous call to this method.  Using
    *   this field causes the method to return additional results from the previous
    *   method call.
    * @param {boolean} [request.activeOnly]
    *   Optional. If true, only metrics and monitored resource types that have
    *   recent data (within roughly 25 hours) will be included in the response.
    *    - If a metric descriptor enumerates monitored resource types, only the
    *      monitored resource types for which the metric type has recent data will
    *      be included in the returned metric descriptor, and if none of them have
    *      recent data, the metric descriptor will not be returned.
    *    - If a metric descriptor does not enumerate the compatible monitored
    *      resource types, it will be returned only if the metric type has recent
    *      data for some monitored resource type. The returned descriptor will not
    *      enumerate any monitored resource types.
    * @param {object} [options]
    *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
    * @returns {Promise} - The promise which resolves to an array.
    *   The first element of the array is Array of {@link protos.google.api.MetricDescriptor|MetricDescriptor}.
    *   The client library will perform auto-pagination by default: it will call the API as many
    *   times as needed and will merge results from all the pages into this array.
    *   Note that it can affect your quota.
    *   We recommend using `listMetricDescriptorsAsync()`
    *   method described below for async iteration which you can stop as needed.
    *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
    *   for more details and examples.
    */
    listMetricDescriptors(request?: protos.google.monitoring.v3.IListMetricDescriptorsRequest, options?: CallOptions): Promise<[
        protos.google.api.IMetricDescriptor[],
        protos.google.monitoring.v3.IListMetricDescriptorsRequest | null,
        protos.google.monitoring.v3.IListMetricDescriptorsResponse
    ]>;
    listMetricDescriptors(request: protos.google.monitoring.v3.IListMetricDescriptorsRequest, options: CallOptions, callback: PaginationCallback<protos.google.monitoring.v3.IListMetricDescriptorsRequest, protos.google.monitoring.v3.IListMetricDescriptorsResponse | null | undefined, protos.google.api.IMetricDescriptor>): void;
    listMetricDescriptors(request: protos.google.monitoring.v3.IListMetricDescriptorsRequest, callback: PaginationCallback<protos.google.monitoring.v3.IListMetricDescriptorsRequest, protos.google.monitoring.v3.IListMetricDescriptorsResponse | null | undefined, protos.google.api.IMetricDescriptor>): void;
    /**
     * Equivalent to `listMetricDescriptors`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} [request.filter]
     *   Optional. If this field is empty, all custom and
     *   system-defined metric descriptors are returned.
     *   Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   specifies which metric descriptors are to be
     *   returned. For example, the following filter matches all
     *   [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
     *
     *       metric.type = starts_with("custom.googleapis.com/")
     * @param {number} [request.pageSize]
     *   Optional. A positive number that is the maximum number of results to
     *   return. The default and maximum value is 10,000. If a page_size <= 0 or >
     *   10,000 is submitted, will instead return a maximum of 10,000 results.
     * @param {string} [request.pageToken]
     *   Optional. If this field is not empty then it must contain the
     *   `nextPageToken` value returned by a previous call to this method.  Using
     *   this field causes the method to return additional results from the previous
     *   method call.
     * @param {boolean} [request.activeOnly]
     *   Optional. If true, only metrics and monitored resource types that have
     *   recent data (within roughly 25 hours) will be included in the response.
     *    - If a metric descriptor enumerates monitored resource types, only the
     *      monitored resource types for which the metric type has recent data will
     *      be included in the returned metric descriptor, and if none of them have
     *      recent data, the metric descriptor will not be returned.
     *    - If a metric descriptor does not enumerate the compatible monitored
     *      resource types, it will be returned only if the metric type has recent
     *      data for some monitored resource type. The returned descriptor will not
     *      enumerate any monitored resource types.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.api.MetricDescriptor|MetricDescriptor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMetricDescriptorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMetricDescriptorsStream(request?: protos.google.monitoring.v3.IListMetricDescriptorsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listMetricDescriptors`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
     *   to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {string} [request.filter]
     *   Optional. If this field is empty, all custom and
     *   system-defined metric descriptors are returned.
     *   Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
     *   specifies which metric descriptors are to be
     *   returned. For example, the following filter matches all
     *   [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
     *
     *       metric.type = starts_with("custom.googleapis.com/")
     * @param {number} [request.pageSize]
     *   Optional. A positive number that is the maximum number of results to
     *   return. The default and maximum value is 10,000. If a page_size <= 0 or >
     *   10,000 is submitted, will instead return a maximum of 10,000 results.
     * @param {string} [request.pageToken]
     *   Optional. If this field is not empty then it must contain the
     *   `nextPageToken` value returned by a previous call to this method.  Using
     *   this field causes the method to return additional results from the previous
     *   method call.
     * @param {boolean} [request.activeOnly]
     *   Optional. If true, only metrics and monitored resource types that have
     *   recent data (within roughly 25 hours) will be included in the response.
     *    - If a metric descriptor enumerates monitored resource types, only the
     *      monitored resource types for which the metric type has recent data will
     *      be included in the returned metric descriptor, and if none of them have
     *      recent data, the metric descriptor will not be returned.
     *    - If a metric descriptor does not enumerate the compatible monitored
     *      resource types, it will be returned only if the metric type has recent
     *      data for some monitored resource type. The returned descriptor will not
     *      enumerate any monitored resource types.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.api.MetricDescriptor|MetricDescriptor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.list_metric_descriptors.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_ListMetricDescriptors_async
     */
    listMetricDescriptorsAsync(request?: protos.google.monitoring.v3.IListMetricDescriptorsRequest, options?: CallOptions): AsyncIterable<protos.google.api.IMetricDescriptor>;
    /**
    * Lists time series that match a filter.
    *
    * @param {Object} request
    *   The request object that will be sent.
    * @param {string} request.name
    *   Required. The
    *   [project](https://cloud.google.com/monitoring/api/v3#project_name),
    *   organization or folder on which to execute the request. The format is:
    *
    *       projects/[PROJECT_ID_OR_NUMBER]
    *       organizations/[ORGANIZATION_ID]
    *       folders/[FOLDER_ID]
    * @param {string} request.filter
    *   Required. A [monitoring
    *   filter](https://cloud.google.com/monitoring/api/v3/filters) that specifies
    *   which time series should be returned.  The filter must specify a single
    *   metric type, and can additionally specify metric labels and other
    *   information. For example:
    *
    *       metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
    *           metric.labels.instance_name = "my-instance-name"
    * @param {google.monitoring.v3.TimeInterval} request.interval
    *   Required. The time interval for which results should be returned. Only time
    *   series that contain data points in the specified interval are included in
    *   the response.
    * @param {google.monitoring.v3.Aggregation} request.aggregation
    *   Specifies the alignment of data points in individual time series as
    *   well as how to combine the retrieved time series across specified labels.
    *
    *   By default (if no `aggregation` is explicitly specified), the raw time
    *   series data is returned.
    * @param {google.monitoring.v3.Aggregation} request.secondaryAggregation
    *   Apply a second aggregation after `aggregation` is applied. May only be
    *   specified if `aggregation` is specified.
    * @param {string} request.orderBy
    *   Unsupported: must be left blank. The points in each time series are
    *   currently returned in reverse time order (most recent to oldest).
    * @param {google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView} request.view
    *   Required. Specifies which information is returned about the time series.
    * @param {number} request.pageSize
    *   A positive number that is the maximum number of results to return. If
    *   `page_size` is empty or more than 100,000 results, the effective
    *   `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
    *   maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
    *   the maximum number of `TimeSeries` returned.
    * @param {string} request.pageToken
    *   If this field is not empty then it must contain the `nextPageToken` value
    *   returned by a previous call to this method.  Using this field causes the
    *   method to return additional results from the previous method call.
    * @param {object} [options]
    *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
    * @returns {Promise} - The promise which resolves to an array.
    *   The first element of the array is Array of {@link protos.google.monitoring.v3.TimeSeries|TimeSeries}.
    *   The client library will perform auto-pagination by default: it will call the API as many
    *   times as needed and will merge results from all the pages into this array.
    *   Note that it can affect your quota.
    *   We recommend using `listTimeSeriesAsync()`
    *   method described below for async iteration which you can stop as needed.
    *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
    *   for more details and examples.
    */
    listTimeSeries(request?: protos.google.monitoring.v3.IListTimeSeriesRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.v3.ITimeSeries[],
        protos.google.monitoring.v3.IListTimeSeriesRequest | null,
        protos.google.monitoring.v3.IListTimeSeriesResponse
    ]>;
    listTimeSeries(request: protos.google.monitoring.v3.IListTimeSeriesRequest, options: CallOptions, callback: PaginationCallback<protos.google.monitoring.v3.IListTimeSeriesRequest, protos.google.monitoring.v3.IListTimeSeriesResponse | null | undefined, protos.google.monitoring.v3.ITimeSeries>): void;
    listTimeSeries(request: protos.google.monitoring.v3.IListTimeSeriesRequest, callback: PaginationCallback<protos.google.monitoring.v3.IListTimeSeriesRequest, protos.google.monitoring.v3.IListTimeSeriesResponse | null | undefined, protos.google.monitoring.v3.ITimeSeries>): void;
    /**
     * Equivalent to `listTimeSeries`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name),
     *   organization or folder on which to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     *       organizations/[ORGANIZATION_ID]
     *       folders/[FOLDER_ID]
     * @param {string} request.filter
     *   Required. A [monitoring
     *   filter](https://cloud.google.com/monitoring/api/v3/filters) that specifies
     *   which time series should be returned.  The filter must specify a single
     *   metric type, and can additionally specify metric labels and other
     *   information. For example:
     *
     *       metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
     *           metric.labels.instance_name = "my-instance-name"
     * @param {google.monitoring.v3.TimeInterval} request.interval
     *   Required. The time interval for which results should be returned. Only time
     *   series that contain data points in the specified interval are included in
     *   the response.
     * @param {google.monitoring.v3.Aggregation} request.aggregation
     *   Specifies the alignment of data points in individual time series as
     *   well as how to combine the retrieved time series across specified labels.
     *
     *   By default (if no `aggregation` is explicitly specified), the raw time
     *   series data is returned.
     * @param {google.monitoring.v3.Aggregation} request.secondaryAggregation
     *   Apply a second aggregation after `aggregation` is applied. May only be
     *   specified if `aggregation` is specified.
     * @param {string} request.orderBy
     *   Unsupported: must be left blank. The points in each time series are
     *   currently returned in reverse time order (most recent to oldest).
     * @param {google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView} request.view
     *   Required. Specifies which information is returned about the time series.
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return. If
     *   `page_size` is empty or more than 100,000 results, the effective
     *   `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
     *   maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
     *   the maximum number of `TimeSeries` returned.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.monitoring.v3.TimeSeries|TimeSeries} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTimeSeriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTimeSeriesStream(request?: protos.google.monitoring.v3.IListTimeSeriesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTimeSeries`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   [project](https://cloud.google.com/monitoring/api/v3#project_name),
     *   organization or folder on which to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     *       organizations/[ORGANIZATION_ID]
     *       folders/[FOLDER_ID]
     * @param {string} request.filter
     *   Required. A [monitoring
     *   filter](https://cloud.google.com/monitoring/api/v3/filters) that specifies
     *   which time series should be returned.  The filter must specify a single
     *   metric type, and can additionally specify metric labels and other
     *   information. For example:
     *
     *       metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
     *           metric.labels.instance_name = "my-instance-name"
     * @param {google.monitoring.v3.TimeInterval} request.interval
     *   Required. The time interval for which results should be returned. Only time
     *   series that contain data points in the specified interval are included in
     *   the response.
     * @param {google.monitoring.v3.Aggregation} request.aggregation
     *   Specifies the alignment of data points in individual time series as
     *   well as how to combine the retrieved time series across specified labels.
     *
     *   By default (if no `aggregation` is explicitly specified), the raw time
     *   series data is returned.
     * @param {google.monitoring.v3.Aggregation} request.secondaryAggregation
     *   Apply a second aggregation after `aggregation` is applied. May only be
     *   specified if `aggregation` is specified.
     * @param {string} request.orderBy
     *   Unsupported: must be left blank. The points in each time series are
     *   currently returned in reverse time order (most recent to oldest).
     * @param {google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView} request.view
     *   Required. Specifies which information is returned about the time series.
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return. If
     *   `page_size` is empty or more than 100,000 results, the effective
     *   `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
     *   maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
     *   the maximum number of `TimeSeries` returned.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.monitoring.v3.TimeSeries|TimeSeries}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/metric_service.list_time_series.js</caption>
     * region_tag:monitoring_v3_generated_MetricService_ListTimeSeries_async
     */
    listTimeSeriesAsync(request?: protos.google.monitoring.v3.IListTimeSeriesRequest, options?: CallOptions): AsyncIterable<protos.google.monitoring.v3.ITimeSeries>;
    /**
     * Return a fully-qualified folderAlertPolicy resource name string.
     *
     * @param {string} folder
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    folderAlertPolicyPath(folder: string, alertPolicy: string): string;
    /**
     * Parse the folder from FolderAlertPolicy resource.
     *
     * @param {string} folderAlertPolicyName
     *   A fully-qualified path representing folder_alert_policy resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderAlertPolicyName(folderAlertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from FolderAlertPolicy resource.
     *
     * @param {string} folderAlertPolicyName
     *   A fully-qualified path representing folder_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromFolderAlertPolicyName(folderAlertPolicyName: string): string | number;
    /**
     * Return a fully-qualified folderAlertPolicyCondition resource name string.
     *
     * @param {string} folder
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    folderAlertPolicyConditionPath(folder: string, alertPolicy: string, condition: string): string;
    /**
     * Parse the folder from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string): string | number;
    /**
     * Parse the alert_policy from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string): string | number;
    /**
     * Parse the condition from FolderAlertPolicyCondition resource.
     *
     * @param {string} folderAlertPolicyConditionName
     *   A fully-qualified path representing folder_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string): string | number;
    /**
     * Return a fully-qualified folderChannelDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    folderChannelDescriptorPath(folder: string, channelDescriptor: string): string;
    /**
     * Parse the folder from FolderChannelDescriptor resource.
     *
     * @param {string} folderChannelDescriptorName
     *   A fully-qualified path representing folder_channel_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderChannelDescriptorName(folderChannelDescriptorName: string): string | number;
    /**
     * Parse the channel_descriptor from FolderChannelDescriptor resource.
     *
     * @param {string} folderChannelDescriptorName
     *   A fully-qualified path representing folder_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromFolderChannelDescriptorName(folderChannelDescriptorName: string): string | number;
    /**
     * Return a fully-qualified folderGroup resource name string.
     *
     * @param {string} folder
     * @param {string} group
     * @returns {string} Resource name string.
     */
    folderGroupPath(folder: string, group: string): string;
    /**
     * Parse the folder from FolderGroup resource.
     *
     * @param {string} folderGroupName
     *   A fully-qualified path representing folder_group resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderGroupName(folderGroupName: string): string | number;
    /**
     * Parse the group from FolderGroup resource.
     *
     * @param {string} folderGroupName
     *   A fully-qualified path representing folder_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromFolderGroupName(folderGroupName: string): string | number;
    /**
     * Return a fully-qualified folderMetricDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} metric_descriptor
     * @returns {string} Resource name string.
     */
    folderMetricDescriptorPath(folder: string, metricDescriptor: string): string;
    /**
     * Parse the folder from FolderMetricDescriptor resource.
     *
     * @param {string} folderMetricDescriptorName
     *   A fully-qualified path representing folder_metric_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderMetricDescriptorName(folderMetricDescriptorName: string): string | number;
    /**
     * Parse the metric_descriptor from FolderMetricDescriptor resource.
     *
     * @param {string} folderMetricDescriptorName
     *   A fully-qualified path representing folder_metric_descriptor resource.
     * @returns {string} A string representing the metric_descriptor.
     */
    matchMetricDescriptorFromFolderMetricDescriptorName(folderMetricDescriptorName: string): string | number;
    /**
     * Return a fully-qualified folderMonitoredResourceDescriptor resource name string.
     *
     * @param {string} folder
     * @param {string} monitored_resource_descriptor
     * @returns {string} Resource name string.
     */
    folderMonitoredResourceDescriptorPath(folder: string, monitoredResourceDescriptor: string): string;
    /**
     * Parse the folder from FolderMonitoredResourceDescriptor resource.
     *
     * @param {string} folderMonitoredResourceDescriptorName
     *   A fully-qualified path representing folder_monitored_resource_descriptor resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderMonitoredResourceDescriptorName(folderMonitoredResourceDescriptorName: string): string | number;
    /**
     * Parse the monitored_resource_descriptor from FolderMonitoredResourceDescriptor resource.
     *
     * @param {string} folderMonitoredResourceDescriptorName
     *   A fully-qualified path representing folder_monitored_resource_descriptor resource.
     * @returns {string} A string representing the monitored_resource_descriptor.
     */
    matchMonitoredResourceDescriptorFromFolderMonitoredResourceDescriptorName(folderMonitoredResourceDescriptorName: string): string | number;
    /**
     * Return a fully-qualified folderNotificationChannel resource name string.
     *
     * @param {string} folder
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    folderNotificationChannelPath(folder: string, notificationChannel: string): string;
    /**
     * Parse the folder from FolderNotificationChannel resource.
     *
     * @param {string} folderNotificationChannelName
     *   A fully-qualified path representing folder_notification_channel resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderNotificationChannelName(folderNotificationChannelName: string): string | number;
    /**
     * Parse the notification_channel from FolderNotificationChannel resource.
     *
     * @param {string} folderNotificationChannelName
     *   A fully-qualified path representing folder_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromFolderNotificationChannelName(folderNotificationChannelName: string): string | number;
    /**
     * Return a fully-qualified folderService resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @returns {string} Resource name string.
     */
    folderServicePath(folder: string, service: string): string;
    /**
     * Parse the folder from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceName(folderServiceName: string): string | number;
    /**
     * Parse the service from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceName(folderServiceName: string): string | number;
    /**
     * Return a fully-qualified folderServiceServiceLevelObjective resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    folderServiceServiceLevelObjectivePath(folder: string, service: string, serviceLevelObjective: string): string;
    /**
     * Parse the folder from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service_level_objective from FolderServiceServiceLevelObjective resource.
     *
     * @param {string} folderServiceServiceLevelObjectiveName
     *   A fully-qualified path representing folder_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Return a fully-qualified folderUptimeCheckConfig resource name string.
     *
     * @param {string} folder
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    folderUptimeCheckConfigPath(folder: string, uptimeCheckConfig: string): string;
    /**
     * Parse the folder from FolderUptimeCheckConfig resource.
     *
     * @param {string} folderUptimeCheckConfigName
     *   A fully-qualified path representing folder_uptime_check_config resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string): string | number;
    /**
     * Parse the uptime_check_config from FolderUptimeCheckConfig resource.
     *
     * @param {string} folderUptimeCheckConfigName
     *   A fully-qualified path representing folder_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string): string | number;
    /**
     * Return a fully-qualified organizationAlertPolicy resource name string.
     *
     * @param {string} organization
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    organizationAlertPolicyPath(organization: string, alertPolicy: string): string;
    /**
     * Parse the organization from OrganizationAlertPolicy resource.
     *
     * @param {string} organizationAlertPolicyName
     *   A fully-qualified path representing organization_alert_policy resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationAlertPolicyName(organizationAlertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from OrganizationAlertPolicy resource.
     *
     * @param {string} organizationAlertPolicyName
     *   A fully-qualified path representing organization_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromOrganizationAlertPolicyName(organizationAlertPolicyName: string): string | number;
    /**
     * Return a fully-qualified organizationAlertPolicyCondition resource name string.
     *
     * @param {string} organization
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    organizationAlertPolicyConditionPath(organization: string, alertPolicy: string, condition: string): string;
    /**
     * Parse the organization from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string): string | number;
    /**
     * Parse the alert_policy from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string): string | number;
    /**
     * Parse the condition from OrganizationAlertPolicyCondition resource.
     *
     * @param {string} organizationAlertPolicyConditionName
     *   A fully-qualified path representing organization_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string): string | number;
    /**
     * Return a fully-qualified organizationChannelDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    organizationChannelDescriptorPath(organization: string, channelDescriptor: string): string;
    /**
     * Parse the organization from OrganizationChannelDescriptor resource.
     *
     * @param {string} organizationChannelDescriptorName
     *   A fully-qualified path representing organization_channel_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationChannelDescriptorName(organizationChannelDescriptorName: string): string | number;
    /**
     * Parse the channel_descriptor from OrganizationChannelDescriptor resource.
     *
     * @param {string} organizationChannelDescriptorName
     *   A fully-qualified path representing organization_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromOrganizationChannelDescriptorName(organizationChannelDescriptorName: string): string | number;
    /**
     * Return a fully-qualified organizationGroup resource name string.
     *
     * @param {string} organization
     * @param {string} group
     * @returns {string} Resource name string.
     */
    organizationGroupPath(organization: string, group: string): string;
    /**
     * Parse the organization from OrganizationGroup resource.
     *
     * @param {string} organizationGroupName
     *   A fully-qualified path representing organization_group resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationGroupName(organizationGroupName: string): string | number;
    /**
     * Parse the group from OrganizationGroup resource.
     *
     * @param {string} organizationGroupName
     *   A fully-qualified path representing organization_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromOrganizationGroupName(organizationGroupName: string): string | number;
    /**
     * Return a fully-qualified organizationMetricDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} metric_descriptor
     * @returns {string} Resource name string.
     */
    organizationMetricDescriptorPath(organization: string, metricDescriptor: string): string;
    /**
     * Parse the organization from OrganizationMetricDescriptor resource.
     *
     * @param {string} organizationMetricDescriptorName
     *   A fully-qualified path representing organization_metric_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationMetricDescriptorName(organizationMetricDescriptorName: string): string | number;
    /**
     * Parse the metric_descriptor from OrganizationMetricDescriptor resource.
     *
     * @param {string} organizationMetricDescriptorName
     *   A fully-qualified path representing organization_metric_descriptor resource.
     * @returns {string} A string representing the metric_descriptor.
     */
    matchMetricDescriptorFromOrganizationMetricDescriptorName(organizationMetricDescriptorName: string): string | number;
    /**
     * Return a fully-qualified organizationMonitoredResourceDescriptor resource name string.
     *
     * @param {string} organization
     * @param {string} monitored_resource_descriptor
     * @returns {string} Resource name string.
     */
    organizationMonitoredResourceDescriptorPath(organization: string, monitoredResourceDescriptor: string): string;
    /**
     * Parse the organization from OrganizationMonitoredResourceDescriptor resource.
     *
     * @param {string} organizationMonitoredResourceDescriptorName
     *   A fully-qualified path representing organization_monitored_resource_descriptor resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationMonitoredResourceDescriptorName(organizationMonitoredResourceDescriptorName: string): string | number;
    /**
     * Parse the monitored_resource_descriptor from OrganizationMonitoredResourceDescriptor resource.
     *
     * @param {string} organizationMonitoredResourceDescriptorName
     *   A fully-qualified path representing organization_monitored_resource_descriptor resource.
     * @returns {string} A string representing the monitored_resource_descriptor.
     */
    matchMonitoredResourceDescriptorFromOrganizationMonitoredResourceDescriptorName(organizationMonitoredResourceDescriptorName: string): string | number;
    /**
     * Return a fully-qualified organizationNotificationChannel resource name string.
     *
     * @param {string} organization
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    organizationNotificationChannelPath(organization: string, notificationChannel: string): string;
    /**
     * Parse the organization from OrganizationNotificationChannel resource.
     *
     * @param {string} organizationNotificationChannelName
     *   A fully-qualified path representing organization_notification_channel resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationNotificationChannelName(organizationNotificationChannelName: string): string | number;
    /**
     * Parse the notification_channel from OrganizationNotificationChannel resource.
     *
     * @param {string} organizationNotificationChannelName
     *   A fully-qualified path representing organization_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromOrganizationNotificationChannelName(organizationNotificationChannelName: string): string | number;
    /**
     * Return a fully-qualified organizationService resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @returns {string} Resource name string.
     */
    organizationServicePath(organization: string, service: string): string;
    /**
     * Parse the organization from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceName(organizationServiceName: string): string | number;
    /**
     * Parse the service from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceName(organizationServiceName: string): string | number;
    /**
     * Return a fully-qualified organizationServiceServiceLevelObjective resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    organizationServiceServiceLevelObjectivePath(organization: string, service: string, serviceLevelObjective: string): string;
    /**
     * Parse the organization from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service_level_objective from OrganizationServiceServiceLevelObjective resource.
     *
     * @param {string} organizationServiceServiceLevelObjectiveName
     *   A fully-qualified path representing organization_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Return a fully-qualified organizationUptimeCheckConfig resource name string.
     *
     * @param {string} organization
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    organizationUptimeCheckConfigPath(organization: string, uptimeCheckConfig: string): string;
    /**
     * Parse the organization from OrganizationUptimeCheckConfig resource.
     *
     * @param {string} organizationUptimeCheckConfigName
     *   A fully-qualified path representing organization_uptime_check_config resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string): string | number;
    /**
     * Parse the uptime_check_config from OrganizationUptimeCheckConfig resource.
     *
     * @param {string} organizationUptimeCheckConfigName
     *   A fully-qualified path representing organization_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectAlertPolicy resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    projectAlertPolicyPath(project: string, alertPolicy: string): string;
    /**
     * Parse the project from ProjectAlertPolicy resource.
     *
     * @param {string} projectAlertPolicyName
     *   A fully-qualified path representing project_alert_policy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAlertPolicyName(projectAlertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from ProjectAlertPolicy resource.
     *
     * @param {string} projectAlertPolicyName
     *   A fully-qualified path representing project_alert_policy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromProjectAlertPolicyName(projectAlertPolicyName: string): string | number;
    /**
     * Return a fully-qualified projectAlertPolicyCondition resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @param {string} condition
     * @returns {string} Resource name string.
     */
    projectAlertPolicyConditionPath(project: string, alertPolicy: string, condition: string): string;
    /**
     * Parse the project from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string): string | number;
    /**
     * Parse the alert_policy from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string): string | number;
    /**
     * Parse the condition from ProjectAlertPolicyCondition resource.
     *
     * @param {string} projectAlertPolicyConditionName
     *   A fully-qualified path representing project_alert_policy_condition resource.
     * @returns {string} A string representing the condition.
     */
    matchConditionFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string): string | number;
    /**
     * Return a fully-qualified projectChannelDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} channel_descriptor
     * @returns {string} Resource name string.
     */
    projectChannelDescriptorPath(project: string, channelDescriptor: string): string;
    /**
     * Parse the project from ProjectChannelDescriptor resource.
     *
     * @param {string} projectChannelDescriptorName
     *   A fully-qualified path representing project_channel_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectChannelDescriptorName(projectChannelDescriptorName: string): string | number;
    /**
     * Parse the channel_descriptor from ProjectChannelDescriptor resource.
     *
     * @param {string} projectChannelDescriptorName
     *   A fully-qualified path representing project_channel_descriptor resource.
     * @returns {string} A string representing the channel_descriptor.
     */
    matchChannelDescriptorFromProjectChannelDescriptorName(projectChannelDescriptorName: string): string | number;
    /**
     * Return a fully-qualified projectGroup resource name string.
     *
     * @param {string} project
     * @param {string} group
     * @returns {string} Resource name string.
     */
    projectGroupPath(project: string, group: string): string;
    /**
     * Parse the project from ProjectGroup resource.
     *
     * @param {string} projectGroupName
     *   A fully-qualified path representing project_group resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectGroupName(projectGroupName: string): string | number;
    /**
     * Parse the group from ProjectGroup resource.
     *
     * @param {string} projectGroupName
     *   A fully-qualified path representing project_group resource.
     * @returns {string} A string representing the group.
     */
    matchGroupFromProjectGroupName(projectGroupName: string): string | number;
    /**
     * Return a fully-qualified projectMetricDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} metric_descriptor
     * @returns {string} Resource name string.
     */
    projectMetricDescriptorPath(project: string, metricDescriptor: string): string;
    /**
     * Parse the project from ProjectMetricDescriptor resource.
     *
     * @param {string} projectMetricDescriptorName
     *   A fully-qualified path representing project_metric_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectMetricDescriptorName(projectMetricDescriptorName: string): string | number;
    /**
     * Parse the metric_descriptor from ProjectMetricDescriptor resource.
     *
     * @param {string} projectMetricDescriptorName
     *   A fully-qualified path representing project_metric_descriptor resource.
     * @returns {string} A string representing the metric_descriptor.
     */
    matchMetricDescriptorFromProjectMetricDescriptorName(projectMetricDescriptorName: string): string | number;
    /**
     * Return a fully-qualified projectMonitoredResourceDescriptor resource name string.
     *
     * @param {string} project
     * @param {string} monitored_resource_descriptor
     * @returns {string} Resource name string.
     */
    projectMonitoredResourceDescriptorPath(project: string, monitoredResourceDescriptor: string): string;
    /**
     * Parse the project from ProjectMonitoredResourceDescriptor resource.
     *
     * @param {string} projectMonitoredResourceDescriptorName
     *   A fully-qualified path representing project_monitored_resource_descriptor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectMonitoredResourceDescriptorName(projectMonitoredResourceDescriptorName: string): string | number;
    /**
     * Parse the monitored_resource_descriptor from ProjectMonitoredResourceDescriptor resource.
     *
     * @param {string} projectMonitoredResourceDescriptorName
     *   A fully-qualified path representing project_monitored_resource_descriptor resource.
     * @returns {string} A string representing the monitored_resource_descriptor.
     */
    matchMonitoredResourceDescriptorFromProjectMonitoredResourceDescriptorName(projectMonitoredResourceDescriptorName: string): string | number;
    /**
     * Return a fully-qualified projectNotificationChannel resource name string.
     *
     * @param {string} project
     * @param {string} notification_channel
     * @returns {string} Resource name string.
     */
    projectNotificationChannelPath(project: string, notificationChannel: string): string;
    /**
     * Parse the project from ProjectNotificationChannel resource.
     *
     * @param {string} projectNotificationChannelName
     *   A fully-qualified path representing project_notification_channel resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectNotificationChannelName(projectNotificationChannelName: string): string | number;
    /**
     * Parse the notification_channel from ProjectNotificationChannel resource.
     *
     * @param {string} projectNotificationChannelName
     *   A fully-qualified path representing project_notification_channel resource.
     * @returns {string} A string representing the notification_channel.
     */
    matchNotificationChannelFromProjectNotificationChannelName(projectNotificationChannelName: string): string | number;
    /**
     * Return a fully-qualified projectService resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @returns {string} Resource name string.
     */
    projectServicePath(project: string, service: string): string;
    /**
     * Parse the project from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceName(projectServiceName: string): string | number;
    /**
     * Parse the service from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceName(projectServiceName: string): string | number;
    /**
     * Return a fully-qualified projectServiceServiceLevelObjective resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @param {string} service_level_objective
     * @returns {string} Resource name string.
     */
    projectServiceServiceLevelObjectivePath(project: string, service: string, serviceLevelObjective: string): string;
    /**
     * Parse the project from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Parse the service_level_objective from ProjectServiceServiceLevelObjective resource.
     *
     * @param {string} projectServiceServiceLevelObjectiveName
     *   A fully-qualified path representing project_service_service_level_objective resource.
     * @returns {string} A string representing the service_level_objective.
     */
    matchServiceLevelObjectiveFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string): string | number;
    /**
     * Return a fully-qualified projectTimeSeries resource name string.
     *
     * @param {string} project
     * @param {string} time_series
     * @returns {string} Resource name string.
     */
    projectTimeSeriesPath(project: string, timeSeries: string): string;
    /**
     * Parse the project from ProjectTimeSeries resource.
     *
     * @param {string} projectTimeSeriesName
     *   A fully-qualified path representing project_time_series resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectTimeSeriesName(projectTimeSeriesName: string): string | number;
    /**
     * Parse the time_series from ProjectTimeSeries resource.
     *
     * @param {string} projectTimeSeriesName
     *   A fully-qualified path representing project_time_series resource.
     * @returns {string} A string representing the time_series.
     */
    matchTimeSeriesFromProjectTimeSeriesName(projectTimeSeriesName: string): string | number;
    /**
     * Return a fully-qualified projectUptimeCheckConfig resource name string.
     *
     * @param {string} project
     * @param {string} uptime_check_config
     * @returns {string} Resource name string.
     */
    projectUptimeCheckConfigPath(project: string, uptimeCheckConfig: string): string;
    /**
     * Parse the project from ProjectUptimeCheckConfig resource.
     *
     * @param {string} projectUptimeCheckConfigName
     *   A fully-qualified path representing project_uptime_check_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string): string | number;
    /**
     * Parse the uptime_check_config from ProjectUptimeCheckConfig resource.
     *
     * @param {string} projectUptimeCheckConfigName
     *   A fully-qualified path representing project_uptime_check_config resource.
     * @returns {string} A string representing the uptime_check_config.
     */
    matchUptimeCheckConfigFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string): string | number;
    /**
     * Return a fully-qualified snooze resource name string.
     *
     * @param {string} project
     * @param {string} snooze
     * @returns {string} Resource name string.
     */
    snoozePath(project: string, snooze: string): string;
    /**
     * Parse the project from Snooze resource.
     *
     * @param {string} snoozeName
     *   A fully-qualified path representing Snooze resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnoozeName(snoozeName: string): string | number;
    /**
     * Parse the snooze from Snooze resource.
     *
     * @param {string} snoozeName
     *   A fully-qualified path representing Snooze resource.
     * @returns {string} A string representing the snooze.
     */
    matchSnoozeFromSnoozeName(snoozeName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
